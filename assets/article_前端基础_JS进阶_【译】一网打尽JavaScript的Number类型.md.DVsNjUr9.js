import{_ as s,c as e,o as a,ae as p}from"./chunks/framework.Dh1jimFm.js";const r=JSON.parse('{"title":"【译】一网打尽JavaScript的Number类型","description":"","frontmatter":{},"headers":[],"relativePath":"article/前端基础/JS进阶/【译】一网打尽JavaScript的Number类型.md","filePath":"article/前端基础/JS进阶/【译】一网打尽JavaScript的Number类型.md","lastUpdated":1743862747000}'),t={name:"article/前端基础/JS进阶/【译】一网打尽JavaScript的Number类型.md"};function c(o,i,n,d,h,l){return a(),e("div",null,i[0]||(i[0]=[p(`<h1 id="【译】一网打尽javascript的number类型" tabindex="-1">【译】一网打尽JavaScript的Number类型 <a class="header-anchor" href="#【译】一网打尽javascript的number类型" aria-label="Permalink to &quot;【译】一网打尽JavaScript的Number类型&quot;">​</a></h1><blockquote><p>本文翻译自 <a href="https://indepth.dev/posts/1139/here-is-what-you-need-to-know-about-javascripts-number-type" target="_blank" rel="noreferrer">here-is-what-you-need-to-know-about-javascripts-number-type</a> 如有错误，欢迎指正。</p></blockquote><p>本文将会详细解释下面的问题：</p><ul><li>0.1 + 0.2 == 0.3 // false</li><li>9007199254740992 == 9007199254740993 // true</li></ul><p>大多数的静态编程语言，比如<code>Java</code> 、<code>C</code> ，有多种不同的数字类型。</p><p>比如，你可以使用 <code>Java</code> 的 <code>byte</code> ，或是 <code>C</code> 语言的 <code>char</code> 来储存一个 <code>[-128,127]</code> 的整数，它们都只占用 <code>1字节</code> 。对于更大的整数，你可以使用 <code>int</code> 或者 <code>long</code> ，分别占用 <code>4字节</code> 和 <code>8字节</code>。对于小数的存储，你还可以使用占用4字节的 <code>float</code> 或者8字节的 <code>double</code> ，它们经常被认为是 <code>浮点数格式</code> ，后面的部分我们会解释这个名字的来历。</p><p>然而，<code>JavaScript</code> 并没有这么多种数字类型， <code>ECMAScript</code> 标准仅定义了一种 <code>双精度64位二进制格式IEEE754</code> 的数字类型。这个类型被用来储存整数和小数，和 <code>Java</code> <code>C</code>中的 <code>double</code> 几乎等同。新接触 <code>JavaScript</code> 的开发者会以为 <code>1</code> 在内存中的储存结构如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e348e3c143aa44ada06b50e1b08a12cb~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>然而事实上的储存结构为：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3df5bcf263594b16a5f23c476e174091~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>这可能会造成许多疑惑，让我们看看 <code>Java</code> 的循环：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Count is: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>思考一下，上面的程序会运行多久？</p><p>不难看出，程序将会在第一次循环后终止。在第二次循环中， 计数器 <code>i</code> 将会增加到 <code>2</code> ， <code>1/2</code> 计算结果为 <code>0.5</code> ，但由于 <code>i</code> 是 <code>integer</code> 类型，它将会被截短为 <code>0</code> ，因此 <code>1/2 &gt; 0</code> 将会返回 <code>false</code> 。</p><p>同样的循环，在 <code>JavaScript</code> 中会是如何：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Count is: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>结果是，上面的程序永远不会结束。因为 <code>1/i</code> 的值是浮点数而非整数。</p><p>是不是有点意思，让我们继续往下看。</p><p>不熟悉 <code>JavaScript</code> 机制的开发者常常会拿另一个特殊的案例来和其他语言作比较，那就是 <code>0.1+0.2=0.30000000000000004</code>，它表示说 <code>0.1+0.2</code> 不等于 <code>0.3</code>。由于相关问题的搜索实在太频繁，以至于 <code>stackoverflow</code> 不得不在搜索框上加上特殊的提示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7f747a1bea314531a62c801470432d06~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>有趣的是，这个问题往往都被打上 <code>JavaScript</code>的标签，但事实上，它存在于任何使用浮点数来表示数字的编程语言中。同时，在 <code>Java</code> 或 <code>C</code> 中使用 <code>float</code> 或 <code>double</code> 时，也会遇到同样的问题。</p><p>另一个有趣的点是，<code>0.1+0.2</code> 的结果并不是在浏览器中打印出的 <code>0.30000000000000004</code>，而是 <code>0.3000000000000000444089209850062616169452667236328125</code>。</p><p>这篇文章将解释浮点数如何工作，以及上面提到过的 <code>for loop</code> 和 <code>0.1+0.2</code> 的例子。</p><blockquote><p>在这里有必要提到 <code>BigInt</code> ，它是 <code>JavaScript</code> 新增的基础数据类型，用来表示任意大的整数。有了 <code>BigInt</code>，你甚至可以安全地存储和操作<strong>超过<code>Number</code>安全整数限制</strong>的大型整数。它在今年的 <em><a href="https://v8.dev/blog/bigint" target="_blank" rel="noreferrer">V8</a></em> 中推出，并已兼容 <em><a href="https://developers.google.com/web/updates/2018/05/bigint" target="_blank" rel="noreferrer">Chrome 67+</a> 和 <a href="http://thecodebarbarian.com/an-overview-of-bigint-in-node-js.html" target="_blank" rel="noreferrer">Node v10.4.0+</a>. 点击 <a href="https://developers.google.com/web/updates/2018/05/bigint" target="_blank" rel="noreferrer">这里</a>了解更多。</em></p></blockquote><h3 id="在科学计数法中表示数字" tabindex="-1">在科学计数法中表示数字 <a class="header-anchor" href="#在科学计数法中表示数字" aria-label="Permalink to &quot;在科学计数法中表示数字&quot;">​</a></h3><p>在了解 <code>浮点数</code> 和 <code>IEEE754 </code>标准前，我们先来看看如何使用科学计数法表示一个数字：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/efd97e7e33e6426f8051b06e0944e3f7~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p><code>Significant</code> 表示数字的 <code>有效部分</code> ，也叫 <code>尾数</code> 、<code>精度</code> 。零通常被认为只是用来占位，而不是有效部分。</p><p><code>Base</code> 表示采用的具体 <code>数值系统</code>，比如 <code>10</code> 代表十进制，<code>2</code> 代表 <code>二进制</code>。</p><p><code>Exponent</code> 定义了小数点需要向左或向右移动几位，以还原出原始的数字。</p><p>任何数字都可以使用科学计数法表示，比如，数字<code>2</code> 在十进制和二进制中分别可以表示成：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ff7ec17a35634b28b84960adc249030c~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>指数为0表示不需要额外进行移位操作，另一个例子，<code>0.0000022</code> 有效数字部分是 <code>22</code> ，让我们移动小数点来去掉其中的0：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d8caf0f6bf1248a6a5520ac7e247cf80~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>上面的计算过程展示了，小数点右移和指数变化的关系。通过这种变化，我们可以让原始数字中只包含有效数字：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c727ff999cfb43548594993c7eea658f~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>通过将小数点右移 <code>8</code> 位 ，我们得到了 <code>22</code> 这个有效数字。因此，这里的指数还需要补一个 <code>-8</code> 。</p><p>同样，下面的例子中，通过左移小数点，我们得到了 <code>22300000</code> 的有效数字：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9afb6109401d4d7abdd758ae75c22f2a~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>可以看到，科学计数法可以很方便的表示很大和很小的数字。有了指数，有效数字最终都可以表示成一个整数或小数。转换为科学计数法计数时，当小数点左移，指数为正；小数点右移，指数为负。</p><p>那么什么样的数字格式是标准化的呢？使用科学计数法标准化的数字，它的小数点前面只能是一个非零的数字，下面是一个格式化数字的案例：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/81a0c6aa76b84e1aa3f7a068ce26d583~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>你可能也注意到了一件事，二进制数的小数点前总是1。这样格式标准化后的数字在做比较时，就可以简单地按顺序比较尾数就可以了。</p><p>我们可以把科学计数法可以理解成浮点数的一种表现形式，<code>浮点</code> 表示小数点是可以 <code>浮动</code> 的，它可以被放在数字有效位的任意位置。通过上面的介绍我们知道，小数点的位置和指数有关。</p><h3 id="基于ieee754标准的浮点数" tabindex="-1">基于IEEE754标准的浮点数 <a class="header-anchor" href="#基于ieee754标准的浮点数" aria-label="Permalink to &quot;基于IEEE754标准的浮点数&quot;">​</a></h3><p><code>IEEE 754</code> 规定了不少和浮点数算法相关的内容，我们这里只关注数字是 <code>存储</code> 、<code>进位</code> 和 <code>加法运算</code> 。在另一篇文章中，我详细介绍了 <a href="https://indepth.dev/how-to-round-binary-numbers/" target="_blank" rel="noreferrer">二进制如何舍入</a>。<code>舍入</code>是一个很常见的操作，它往往出现在当某个格式没有足够的比特数来存储数字时。了解它的原理很重要，现在让我们看看数字是如何存储的，后面的例子中我们都将拿二进制数字来举例。</p><h3 id="数字是如何存储的" tabindex="-1">数字是如何存储的 <a class="header-anchor" href="#数字是如何存储的" aria-label="Permalink to &quot;数字是如何存储的&quot;">​</a></h3><p><code>IEEE754</code> 中定义了两种常用格式 —— <code>单精度</code> 和 <code>双精度</code> 。他们的区别在于使用的比特数不一样，因此能存储的数字范围也不同。同样，将数字转换为这两种格式的方法也基本类似，唯一的区别在于，它们给有效位和指数分配的位数是不同的。</p><p><code>IEEE754</code> 浮点数由 <code>符号位</code> ，<code>有效位</code> 和 <code>指数</code> 组成，下图展示了 JavaScript Number类型所采用的双精度格式是如何分配这些比特位的：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b1935dd1460a46caac6f389b9e82c1e3~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p><code>符号位</code> 占用 1 比特位，<code>指数</code>占用 11 比特位，而另外的 52 比特位则都分配给了 <code>尾数</code>（即有效位）。下表展示了每种格式的比特位分配情况：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/33059d15bbee46fab4e086d7eca1da57~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>指数按补码格式存储，在另一篇 <a href="https://indepth.dev/the-mechanics-behind-exponent-bias-in-floating-point/" target="_blank" rel="noreferrer">深入补码格式</a> 的文章中，我详细介绍了它和另外两种实现方式的区别，请花一点时间理解，因为我们将会在后面的转换中频繁使用它。</p><h3 id="整数的存储" tabindex="-1">整数的存储 <a class="header-anchor" href="#整数的存储" aria-label="Permalink to &quot;整数的存储&quot;">​</a></h3><p>上面我们提到过比特位的分配模式，接下来，我们看看整数 <code>1</code> 和 <code>3</code> 是如何存储的。数字 <code>1</code> 在所有进制系统中都表示为 <code>1</code> ，因此无需额外进行转换，它在科学计数法的表示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5f8373588cf541a08bf917b76cedc29d~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>它的尾数是 <code>1</code> ，指数是 <code>0</code> ，我们可能会以为它的浮点数表示是下面的样子：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fdb72179b56e440b8c13d64fdc2b65bb~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>事实是这样吗？可惜的是JavaScript 并没有提供一个内置函数来直观地展示出某个数字存储时每个比特位是什么。为此，我写了一个简单的函数，它能让我们看到数字是如何存储的：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> to64bitFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i, result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DataView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArrayBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setFloat64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, number, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bits </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUint8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (bits.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            bits </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bits.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bits;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bits;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>通过上面的方法，我们可以看到，数字 <code>1</code> 的存储是这样：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4d6c3cb18aa74bf1817d98f9d98ff096~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>这和我们之前的猜想完全不同。尾数全是0，而且指数有一堆1。下面，让我们一探究竟吧。</p><p>首先，我们要知道，每个数字都会被转换成科学计数法的格式，这样做有什么优点呢？如果小数点前的数字总是 <code>1</code> ，我们就无需给它分配1比特的空间，同时，在进行数学运算时，硬件会自动补上这个 <code>1</code> 。由于数字 <code>1</code> 在标准格式中小数点后没有任何数字，而小数点前的数字 <code>1</code> 无需存储，因此它的有效位全是0。</p><p>然后，让我们看看指数中的一堆 <code>1</code> 从哪儿来。之前我们提到过，指数是按补码的格式存储的，因此我们来计算一下偏移量：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3759c2f1bb90484bb930e308c61baad7~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>可以看到，这和我们上面展示的一致，因此根据补码的规则，其实保存的值是 <code>0</code> ，如果对此有疑问，可以阅读这篇 <a href="https://indepth.dev/the-mechanics-behind-exponent-bias-in-floating-point/" target="_blank" rel="noreferrer">二进制补码</a>。</p><p>现在我们用上面了解的信息试着将数字 <code>3</code> 转换为浮点数格式。<code>3</code> 的二进制是 <code>11</code> ,如果不记得为什么，可以查阅这篇 <a href="https://indepth.dev/the-simple-math-behind-decimal-binary-conversion-algorithms/" target="_blank" rel="noreferrer">二进制与十进制的转换算法</a> 。正常情况下，数字 <code>3</code> 的二进制格式会是这样：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/921a0846453744f1bee0c4a4419f788f~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>在小数点后仅有一个数字 <code>1</code> ，它将会被作为尾数储存。同时，根据之前的介绍，小数点前的数字 <code>1</code> 将不会被储存。另外指数位是 <code>1</code> ，我们看看二进制补码是如何计算出来的：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b9f330dc99f448998d85074245a9cae9~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>另外，需要注意的是，尾数部分在储存时顺序和科学计数法中的顺序是一致的——从左到右，有了这个概念，我们就可以知道整个浮点数的表示了：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/15c2e4fbc5254ef4b39902c3f985fa99~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>如果你使用我在上面提供的函数，就可以得到一致的浮点数表示。</p><h3 id="_0-1-0-2为什么不等于0-3" tabindex="-1">0.1+0.2为什么不等于0.3 <a class="header-anchor" href="#_0-1-0-2为什么不等于0-3" aria-label="Permalink to &quot;0.1+0.2为什么不等于0.3&quot;">​</a></h3><p>现在我们知道了数字是如何被储存的，下面让我们看看这个经常被提到的例子，它的简单解释是：</p><blockquote><p>只有某个小数的分母是2的指数倍，它才可以在二进制格式中被完整地表示。而0.1的分母和0.2的分母都不是2的指数倍，因此它们不能在二进制格式中被完整地表示。在 IEEE-754浮点数 标准下储存，它们的尾数中的有效位会被进位到可以容纳的最大位数 —— 半精度为10位，单精度为23位，双精度则为52位，由于不同的精度使用的比特位不同，0.1和0.2的浮点数近似值可能略大于或略小于十进制的表示，但不会相等。因此，0.1+0.2==0.3 不可能成立。</p></blockquote><p>对于开发人员来说，上面解释的可能已经足够清楚，不过最好的方式是你自己演示计算机的整个计算流程，这也是我们接下来要做的。</p><h3 id="_0-1和0-2的浮点数表示" tabindex="-1">0.1和0.2的浮点数表示 <a class="header-anchor" href="#_0-1和0-2的浮点数表示" aria-label="Permalink to &quot;0.1和0.2的浮点数表示&quot;">​</a></h3><p>首先让我们看看 <code>0.1</code> 的浮点数表示。第一步，我们要先通过乘 <code>2</code> 算法将 <code>0.1 </code> 转换为二进制，具体的原理可以参考我的这篇 <a href="https://indepth.dev/the-simple-math-behind-decimal-binary-conversion-algorithms/" target="_blank" rel="noreferrer">十进制和二进制的转换算法</a> 。转换后，我们得到了一个无限循环小数：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ee515891fd3445bbf6121c3e0142e93~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>下一步，将它展示成标准的科学计数法来表示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c29ab2f034b84a0da645e50a3f1134ff~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>由于尾数最多只能有 <code>52</code> 位，因此我们需要将小数点后的 52 位进行进位。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5d12108fcd6148beb30cce2cb05516c4~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>使用IEEE754标准中定义的舍入规则，以及我另一篇 <a href="https://medium.com/@maximus.koretskyi/how-to-round-binary-fractions-625c8fa3a1af" target="_blank" rel="noreferrer">二进制数的舍入</a> 所描述的方法，我们得到了进位后的数字：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/31210f8759e04dc89995b3e4cd4e8191~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>最后，计算出指数的补码：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b8eddde834ac412ab9f8fa0451e52fd7~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>然后，我们得到了数字 <code>0.1</code> 的浮点数表示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/255bf58d7a0e47018f79e698f103183f~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>建议你试着自己计算 <code>0.2</code> 的浮点数表示，最终你会得到的科学计数法表示和二进制表示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/11a6d3b6778141f7a697f7e7e1951901~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><h3 id="计算0-1-0-2的结果" tabindex="-1">计算0.1+0.2的结果 <a class="header-anchor" href="#计算0-1-0-2的结果" aria-label="Permalink to &quot;计算0.1+0.2的结果&quot;">​</a></h3><p>首先，将0.1和0.2转换成科学计数法的格式，我们将得到：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d1d720645df34e34a6cfa59ec7c67b8f~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>加法运算要求数字必须拥有相同的指数，而根据规则，需要将指数值小的数字统一成值更大的指数，因此我们将第一个数字的指数从 <code>-4</code> 转换成 <code>-3</code> ，以和第二个数字保持一致：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/721c5f0c28fc4c209c089c6020f4c7bf~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>接下来，执行加法运算：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/715beda672ae4440b1f6e920030bfdc3~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>现在的计算结果是浮点数格式，因此我们还需要将它标准化，其中包括了按需舍入，以及计算指数中的补码。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/99ef0decb4fd4c3aa1de408f6f0e9e43~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>标准化后的数字触发了舍入，因此我们得到：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9be35fcbc5704e83a981a328f9773df3~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>最终，浮点数的表示为：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/94bbd92397e34240a3cb783bfa5dbee2~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>这就是执行 <code>0.1+0.2</code> 后最终的存储结果，为了得到这个结果，计算机一共需要进行 <code>3</code> 次舍入 —— 包括两次对单个数字的舍入，一次在进行加法运算时。而当单独储存0.3这个数字时，计算机仅对它进行一次舍入。<strong>正是因为这种区别，导致了 <code>0.1+0.2</code> 和 <code>0.3</code> 二进制表示的不同</strong>。当JavaScript执行 <code>0.1+0.2 === 0.3</code> 时，实际比较的其实是这些比特位表示，而由于它们不同，因此返回结果为 <em>false</em> 。另一方面，如果在某种情形下两者的比特位排列一样的话，即便0.1和0.2在二进制中不能被有限表示，<code>0.1+0.2 === 0.3</code> 还是会判断为 <code>true</code>。</p><p>试着用我之前提供的工具方法 <code>to64bitFloat(0.3)</code> 验证 <code>0.3</code> 的比特位排列，你会发现结果和我们上面计算<code>0.1+0.2</code> 的结果是不同的。</p><p>如果你想知道这个结果的转换为十进制后的数，只需将这些比特位表示为指数为0的科学计数法，然后将其转换成十进制。最终你将得到 <code>0.1+0.2</code> 实际存储的十进制数为 <code>0.3000000000000000444089209850062616169452667236328125</code> ，而 <code>0.3</code> 的十进制数则为 <code>0.299999999999999988897769753748434595763683319091796875</code> 。</p><h3 id="无限循环问题的答案" tabindex="-1">无限循环问题的答案 <a class="header-anchor" href="#无限循环问题的答案" aria-label="Permalink to &quot;无限循环问题的答案&quot;">​</a></h3><p>了解无限循环问题，有一个关键的数字 <code>9007199254740991</code> ，下面我们来聊聊这个特殊的数字。</p><h4 id="number-max-safe-integer" tabindex="-1">Number.MAX_SAFE_INTEGER <a class="header-anchor" href="#number-max-safe-integer" aria-label="Permalink to &quot;Number.MAX_SAFE_INTEGER&quot;">​</a></h4><p>在控制台输入 <code>Number.MAX_SAFE_INTEGER</code> ，会打印出我们的关键数字 <code>9007199254740991</code> 。为什么它如何特殊，甚至还拥有自己的常量名？下面是 <a href="http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.max_safe_integer" target="_blank" rel="noreferrer">ECMAScript Language Specification</a> 对它的描述：</p><blockquote><p>Number.MAX_SAFE_INTEGER 表示最大的安全整数<strong>n</strong> ，因此 <code>n</code> 和 <code>n+1</code> 表示的其实是同一个数字。Number.MAX_SAFE_INTEGER 的值为 <strong>9007199254740991</strong> (2⁵³−1).</p></blockquote><p>MDN 也有一些补充说明：</p><blockquote><p>这里安全存储的意思是指能够准确区分两个不相同的值，例如 <code>Number.MAX_SAFE_INTEGER + 1 === Number.MAX_SAFE_INTEGER + 2</code> 将得到 true的结果，而这在数学上是错误的。</p></blockquote><p>需要注意的是，它并不是<code> JavaScript</code> 所能表示的最大数字。举个例子，<code>MAX_SAFE_INTEGER + 3</code> 所表示的数字 <code>9007199254740994</code> 就可以被安全地表示。而通过常量<code>Number.MAX_VALUE</code> ，你将得到可以表示的最大数字 <code>1.7976931348623157e+308</code> 。让人惊讶的是，有一些介于 <code>MAX_SAFE_INTEGER</code> 和 <code>MAX_VALUE</code> 之间的数字却并不能被正确地表示。事实上，<code>MAX_SAFE_INTEGER</code> 和<code>MAX_SAFE_INTEGER+ 3</code> 的 <code>9007199254740993</code> 就是其中之一。如果将它输入在控制台上，你会得到 <code>9007199254740992</code> 。看起来，JavaScript 并没有采用原始的值，而是减去了1之后的值。</p><p>为了一探究竟，我们来看看 <code>9007199254740991 (MAX_SAFE_INTEGER)</code> 的浮点数表示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d94b90ee136f470eb2a8ec4af6dd40d4~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>转换为科学计数法后：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4f6125771c9f4b80b92fe191fcc6f7b8~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>现在，为了让指数为0，我们将小数点右移52位到最右端：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2da2abde807944cfa41997a6a875b6b9~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>现在，为了储存 <code>MAX_SAFE_INTEGER</code> ，我们用掉了所有的尾数位，此时指数为52。为了存储更大的数字，只能将指数+1，也就是53，因此我们将小数点右移53位，而由于尾数只有52位，我们在末尾补上0。指数为54的情况下，末尾会补上2个0，指数为55，补3个0，以此类推。</p><p>这会有什么影响呢？你可能已经猜到了。由于所有大于 <strong>MAX_SAFE_INTEGER</strong> 的数字末尾都是0，因此在64位的浮点数标准中，任何大于 <strong>MAX_SAFE_INTEGER</strong> 的奇数都无法被表示出来。为了储存这些数字，尾数需要超过52位的空间。让我们看看具体的行为：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0604bc329c104a608c886cec7e717197~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>可以看到，<code>9007199254740993</code>, <code>9007199254740995</code> 不能被表示为 <code>64位</code> 的浮点数，而当数字不断增加时，不能被储存的数字范围还将急剧扩大。</p><h3 id="无限循环" tabindex="-1">无限循环 <a class="header-anchor" href="#无限循环" aria-label="Permalink to &quot;无限循环&quot;">​</a></h3><p>让我们回头看看这个 <code>for</code> 循环：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Count is: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>上面的代码会进入无限循环。在文章的开头我提到过，这是由于在 JavaScript 中 <code>1/i</code> 的结果不是一个整数，而是一个浮点数。现在你应该已经知道了浮点数的工作原理，以及 <code>Number.MAX_SAFE_INTEGER</code> 的含义，这将使你更容易理解为什么它会进入无限循环。</p><p>上面的循环停止的条件是， <code>i</code> 达到 <code>Inifinity</code> ，因为<code>1/Infinity</code> 结果是 <code>false</code> ，然而这并没有发生。在前面的篇幅中我解释了为什么有些整数不能被储存，而会被进位成最近的偶数。在这个例子中，计数器 <code>i</code> 的累加会一直达到 <code>9007199254740993</code> ，也就是 <code>MAX_SAFE_INTEGER+2</code> 。这是第一个不能被储存的整数，因为它会被舍入到最近的偶数 <code>9007199254740992</code> 。因此循环会卡在这个数字上，导致了这里的无限循环。</p><h3 id="简单聊聊-nan-和-infinity" tabindex="-1">简单聊聊 NaN 和 Infinity <a class="header-anchor" href="#简单聊聊-nan-和-infinity" aria-label="Permalink to &quot;简单聊聊 NaN 和 Infinity&quot;">​</a></h3><p>在结束这篇文章之前，我想简单解释一下 <code>NaN</code> 和 <code>Infinity</code> 。尽管两者都被看作是浮点数以及浮点数运算中的特例，但 <code>NaN</code> 表示的是 <code>Not a Number</code> ，和 <code>Infinity</code> 不同。另外，他们的指数位都是 <code>1024</code> <code>(11111111111)</code> ，而 <code>Number.MAX_VALUE</code> 的指数位则是 <code>1023</code> <code>(111111111101)</code> 。</p><p>由于 <code>NaN</code> 实质上也是一个浮点数，因此在浏览器中运行 <code>typeof NaN</code> 会返回 <code>Number</code> ，同时它的指数位全是1，尾数仅有一个不是0：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e0b9167957664730b5272e8c5b96d3c9~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>有一些数学运算可能会得到 <code>NaN</code> ，比如 <code>0/0</code> 或 <code>Math.sqrt(-4)</code> 。JavaScript 中也有一些方法可能会返回 <code>NaN</code> ，比如当 <code>parseInt</code> 参数为字符串时 <code>parseInt(&quot;s&quot;)</code> 。有趣的是，将 <code>NaN</code> 和任何对象比较时，总会返回 <code>false</code> 。例如，下面操作的返回值均为 <code>false</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NaN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NaN</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NaN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NaN</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NaN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NaN</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NaN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NaN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NaN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span></code></pre></div><p>而且， <code>NaN</code> 是唯一一个和自己不相等的值。另外，JavaScript 还提供了 <code>isNaN()</code> 方法来检测一个值是否为 <code>NaN</code> 。</p><p><code>Infinity</code> 是另一个特殊的浮点数，它被用来处理溢出以及一些数学运算，例如 <code>1/0</code> 。<code>Infinity</code> 的指数位全是1，尾数位全是0：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7cb5ac90d297418e9898e85c9d01a304~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>正无穷大的符号位是0，负无穷大的符号位是1。 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity" target="_blank" rel="noreferrer">MDN</a>也描述了返回 <code>Infinity</code> 的一些场景。另外，和 <code>NaN</code> 不同， <code>Infinity</code> 可以被用来安全地做比较。</p><blockquote><p>本文翻译自 <a href="https://indepth.dev/posts/1139/here-is-what-you-need-to-know-about-javascripts-number-type" target="_blank" rel="noreferrer">here-is-what-you-need-to-know-about-javascripts-number-type</a> 如有错误，欢迎指正。</p></blockquote>`,143)]))}const g=s(t,[["render",c]]);export{r as __pageData,g as default};
