import{_ as i,c as a,o as l,ae as n}from"./chunks/framework.Dh1jimFm.js";const o=JSON.parse('{"title":"week3 - 脚手架核心流程开发","description":"","frontmatter":{},"headers":[],"relativePath":"article/架构师课程/week3-笔记.md","filePath":"article/架构师课程/week3-笔记.md","lastUpdated":1743859882000}'),h={name:"article/架构师课程/week3-笔记.md"};function p(k,s,t,e,E,r){return l(),a("div",null,s[0]||(s[0]=[n(`<p>[TOC]</p><h1 id="week3-脚手架核心流程开发" tabindex="-1">week3 - 脚手架核心流程开发 <a class="header-anchor" href="#week3-脚手架核心流程开发" aria-label="Permalink to &quot;week3 - 脚手架核心流程开发&quot;">​</a></h1><h2 id="本周导学" tabindex="-1">本周导学 <a class="header-anchor" href="#本周导学" aria-label="Permalink to &quot;本周导学&quot;">​</a></h2><h3 id="将收获什么" tabindex="-1">将收获什么 <a class="header-anchor" href="#将收获什么" aria-label="Permalink to &quot;将收获什么&quot;">​</a></h3><ul><li>架构设计和技术方案设计全过程</li><li>脚手架执行核心流程和commander框架</li><li>如何让Node项目支持ES Module</li></ul><h3 id="主要内容" tabindex="-1">主要内容 <a class="header-anchor" href="#主要内容" aria-label="Permalink to &quot;主要内容&quot;">​</a></h3><ul><li>脚手架需求分析和架构设计</li><li>脚手架模块拆分策略和core模块技术方案</li><li>脚手架执行准备过程实现</li><li>脚手架命令注册实现（基于commander）</li></ul><h2 id="_01-imooc-cli-脚手架需求分析" tabindex="-1">01-imooc-cli 脚手架需求分析 <a class="header-anchor" href="#_01-imooc-cli-脚手架需求分析" aria-label="Permalink to &quot;01-imooc-cli 脚手架需求分析&quot;">​</a></h2><h3 id="大厂标准项目流程" tabindex="-1">大厂标准项目流程 <a class="header-anchor" href="#大厂标准项目流程" aria-label="Permalink to &quot;大厂标准项目流程&quot;">​</a></h3><p><img src="https://oss-1252175178.cos.ap-shanghai.myqcloud.com/%E6%85%95%E8%AF%BE%E7%BD%91%E6%9E%B6%E6%9E%84%E5%B8%88%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E5%8E%82%E5%81%9A%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%B5%81%E7%A8%8B.jpeg" alt=""></p><h3 id="脚手架需求分析" tabindex="-1">脚手架需求分析 <a class="header-anchor" href="#脚手架需求分析" aria-label="Permalink to &quot;脚手架需求分析&quot;">​</a></h3><p>从这张图看起，分析研发过程的痛点：</p><p><img src="https://oss-1252175178.cos.ap-shanghai.myqcloud.com/%E6%85%95%E8%AF%BE%E7%BD%91%E6%9E%B6%E6%9E%84%E5%B8%88%E8%AF%BE%E7%A8%8B/%E8%84%9A%E6%89%8B%E6%9E%B6%E8%A6%81%E8%A7%A3%E5%86%B3%E7%9A%84%E7%97%9B%E7%82%B9.png" alt=""></p><h4 id="痛点分析" tabindex="-1">痛点分析 <a class="header-anchor" href="#痛点分析" aria-label="Permalink to &quot;痛点分析&quot;">​</a></h4><ul><li><strong>创建项目/组件时，存在大量重复代码拷贝</strong>：快速复用已有沉淀</li><li><strong>协同开发时，由于git操作不规范</strong>，导致分支混乱，操作耗时：制定标准的git操作规范并集成到脚手架</li><li><strong>发布上线耗时，而且容易出现各种错误</strong>：制定标准的上线流程和规范并集成到脚手架</li></ul><h4 id="需求分析" tabindex="-1">需求分析 <a class="header-anchor" href="#需求分析" aria-label="Permalink to &quot;需求分析&quot;">​</a></h4><blockquote><p>通用的研发脚手架</p></blockquote><ul><li>通用的项目/组件创建能力 <ul><li>模板支持定制，定制后能够快速生效</li><li>模板支持快速接入，极低的接入成本</li></ul></li><li>通用的项目/组件发布能力 <ul><li>发布过程自动完成标准的git操作</li><li>发布成功后自动删除开发分支并创建tag</li><li>发布后自动完成云构建、OSS上传、CDN上传、域名绑定</li><li>发布过程支持测试/正式两种模式</li></ul></li></ul><h3 id="加餐-大厂是如何做-git-操作的" tabindex="-1">加餐：大厂是如何做 git 操作的？ <a class="header-anchor" href="#加餐-大厂是如何做-git-操作的" aria-label="Permalink to &quot;加餐：大厂是如何做 git 操作的？&quot;">​</a></h3><ul><li>Git Flow</li></ul><p><img src="https://oss-1252175178.cos.ap-shanghai.myqcloud.com/%E6%85%95%E8%AF%BE%E7%BD%91%E6%9E%B6%E6%9E%84%E5%B8%88%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E5%8E%82%E6%98%AF%E5%A6%82%E4%BD%95%E5%81%9A%20git%20%E6%93%8D%E4%BD%9C%E7%9A%84.jpeg" alt=""></p><h2 id="_02-imooc-cli-脚手架架构设计" tabindex="-1">02-imooc-cli 脚手架架构设计 <a class="header-anchor" href="#_02-imooc-cli-脚手架架构设计" aria-label="Permalink to &quot;02-imooc-cli 脚手架架构设计&quot;">​</a></h2><h3 id="绘制架构设计图" tabindex="-1">绘制架构设计图 <a class="header-anchor" href="#绘制架构设计图" aria-label="Permalink to &quot;绘制架构设计图&quot;">​</a></h3><p>参考：</p><p><img src="https://oss-1252175178.cos.ap-shanghai.myqcloud.com/%E6%85%95%E8%AF%BE%E7%BD%91%E6%9E%B6%E6%9E%84%E5%B8%88%E8%AF%BE%E7%A8%8B/%E8%84%9A%E6%89%8B%E6%9E%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%9B%BE.jpeg" alt=""></p><p>我的绘制：</p><p><img src="https://oss-1252175178.cos.ap-shanghai.myqcloud.com/%E6%85%95%E8%AF%BE%E7%BD%91%E6%9E%B6%E6%9E%84%E5%B8%88%E8%AF%BE%E7%A8%8B/%E8%84%9A%E6%89%8B%E6%9E%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%9B%BE-%E8%87%AA%E5%88%B6.jpg" alt=""></p><h3 id="核心模块" tabindex="-1">核心模块 <a class="header-anchor" href="#核心模块" aria-label="Permalink to &quot;核心模块&quot;">​</a></h3><ul><li>脚手架 <ul><li>脚手架核心框架</li><li>初始化体系</li><li>标准git操作体系</li><li>发布体系</li></ul></li><li>服务 <ul><li>OPEN API</li><li>WebSocket</li></ul></li><li>支撑体系 <ul><li>本地缓存</li><li>模板库</li><li>数据体系</li><li>代码仓库</li><li>资源体系</li><li>远程缓存</li></ul></li></ul><h2 id="_03-脚手架模块拆分策略和core模块技术方案" tabindex="-1">03-脚手架模块拆分策略和core模块技术方案 <a class="header-anchor" href="#_03-脚手架模块拆分策略和core模块技术方案" aria-label="Permalink to &quot;03-脚手架模块拆分策略和core模块技术方案&quot;">​</a></h2><h3 id="拆分策略" tabindex="-1">拆分策略 <a class="header-anchor" href="#拆分策略" aria-label="Permalink to &quot;拆分策略&quot;">​</a></h3><ul><li><strong>核心模块：core</strong></li><li><strong>命令模块：commands</strong><ul><li>初始化</li><li>发布</li><li>清除缓存</li></ul></li><li><strong>模型模块：models</strong><ul><li>Command 命令</li><li>Project 项目</li><li>Component 组件</li><li>Npm 模块</li><li>Git 仓库</li></ul></li><li><strong>工具模块：utils</strong><ul><li>Git 操作</li><li>云构建</li><li>工具方法</li><li>API 请求</li><li>Git API</li></ul></li></ul><h3 id="core模块技术方案" tabindex="-1">core模块技术方案 <a class="header-anchor" href="#core模块技术方案" aria-label="Permalink to &quot;core模块技术方案&quot;">​</a></h3><p>命令执行流程：</p><ul><li>准备阶段（本周开发）</li><li>命令注册（下周开发）</li><li>命令执行（下周开发）</li></ul><p><img src="https://oss-1252175178.cos.ap-shanghai.myqcloud.com/%E6%85%95%E8%AF%BE%E7%BD%91%E6%9E%B6%E6%9E%84%E5%B8%88%E8%AF%BE%E7%A8%8B/%E8%84%9A%E6%89%8B%E6%9E%B6core%E6%A8%A1%E5%9D%97%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88.jpeg" alt=""></p><h3 id="涉及技术点" tabindex="-1">涉及技术点 <a class="header-anchor" href="#涉及技术点" aria-label="Permalink to &quot;涉及技术点&quot;">​</a></h3><p>核心库</p><ul><li>import-local</li><li>commander</li></ul><p>工具库</p><ul><li>npmlog</li><li>fs-extra</li><li>semver</li><li>colors</li><li>user-home</li><li>dotenv</li><li>root-check</li></ul><h2 id="_04-脚手架执行准备实现" tabindex="-1">04-脚手架执行准备实现 <a class="header-anchor" href="#_04-脚手架执行准备实现" aria-label="Permalink to &quot;04-脚手架执行准备实现&quot;">​</a></h2><h3 id="主要内容-1" tabindex="-1">主要内容： <a class="header-anchor" href="#主要内容-1" aria-label="Permalink to &quot;主要内容：&quot;">​</a></h3><ul><li>拆包</li><li>检查版本号</li><li>检查node版本</li><li>检查root启动</li><li>检查用户主目录</li><li>检查入参</li><li>检查环境变量</li><li>检查是否为最新版本（如有，则提示更新）</li></ul><h3 id="调试技巧" tabindex="-1">调试技巧 <a class="header-anchor" href="#调试技巧" aria-label="Permalink to &quot;调试技巧&quot;">​</a></h3><ul><li>如何调试 <code>jay-cli-dev</code> ？ <ul><li>查找 <code>jay-cli-dev</code> bin文件地址： <code>which jay-cli-dev</code></li><li>新建 <code>lanch.json</code> 文件，并设置其中的 <code>&quot;program&quot;: &quot;/Users/aaron/.nvm/versions/node/v14.15.4/bin/jay-cli-dev&quot;</code></li><li>打断点，然后点击运行</li></ul></li><li>如何快速进入第三方依赖包的源码？ <ul><li>貌似提供了ts文件的包就不能直接进入了</li><li>可以通过 node_modules 直接查看源码</li></ul></li><li>如何快速折叠所有代码？ <ul><li>vscode快捷键 <code>ctrl+k+0</code> 折叠所有代码</li><li>vscode快捷键 <code>ctrl+k+j</code> 展开所有代码</li></ul></li></ul><h3 id="command使用" tabindex="-1">Command使用 <a class="header-anchor" href="#command使用" aria-label="Permalink to &quot;Command使用&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/usr/bin/env node</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> commander</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;commander&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pkg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../package.json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取commander的单例</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// const { program } = commander.program;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 手动实例化一个Command实例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> program</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commander.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">program</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">keys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pkg.bin)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">usage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&lt;command&gt; [options]&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pkg.version)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">option</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;-d, --debug&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;是否开启调试模式&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">option</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;-e, --env &lt;envName&gt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;获取环境变量名称&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// command 注册命令</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> clone</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> program.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;clone &lt;source&gt; [destination]&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">clone</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;clone a repository&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">option</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;-f, --force&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;是否强制拷贝&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">destination</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">comObj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;do clone&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, source, destination, comObj.force);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// addCommand 注册命令</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> service</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commander.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;service&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">service</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;start [port]&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;start service at some port&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;do service start&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, port);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">service</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;stop&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;stop service&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;stop service&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">program.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addCommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(service);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// jay-test-cli install init -&gt; jay-cli init</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// program</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   .command(&#39;install [name]&#39;, &#39;install package&#39;, {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//     executableFile: &#39;jay-cli&#39;,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 可还用来实现脚手架串联</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // isDefault: true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 将此命令作为默认的执行命令</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//     hidden: true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 隐藏command</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   })</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   .alias(&#39;i&#39;);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// program</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   .arguments(&#39;&lt;cmd&gt; [options]&#39;)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 类似 Yargs.demandCommand，强制参数必须传递</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   .description(&#39;test command&#39;, {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//     cmd: &#39;command to run&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//     options: &#39;options for command&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   })</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   .action((cmd, options) =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//     console.log(cmd, options);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 高级定制1：自定义help信息</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// console.log(program.helpInformation());</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 展示帮助信息</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// program.helpInformation = function() {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 直接修改帮助信息</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   return &#39;&#39; </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// } </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// program.on(&#39;--help&#39;, () =&gt; {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 监听参数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   console.log(&#39;your help information\\n&#39;);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 高级定制2：实现debug模式</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// program.on(&#39;option.debug&#39;, () =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   if (program.debug) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//     process.env.LOG_LEVEL = &#39;verbose&#39;;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   console.log(process.env.LOG_LEVEL);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 高级定制3：对未知命令监听</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">program.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;command:*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;未知的命令：&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, obj[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> availableCommands</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> program.commands.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cmd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cmd.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;可用命令：&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> availableCommands.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;,&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">program</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.argv);</span></span></code></pre></div><h3 id="源码分析" tabindex="-1">源码分析： <a class="header-anchor" href="#源码分析" aria-label="Permalink to &quot;源码分析：&quot;">​</a></h3><h4 id="require处理文件的方式" tabindex="-1">Require处理文件的方式 <a class="header-anchor" href="#require处理文件的方式" aria-label="Permalink to &quot;Require处理文件的方式&quot;">​</a></h4><blockquote><p>require 支持 .js/.json/.node 三种格式的文件</p></blockquote><ul><li>处理 <code>.js</code> 时 -&gt; 使用js引擎解析，要求该 <code>.js</code> 文件使用 <code>module.exports/exports</code> 输出，否则会报错</li><li>处理 <code>.json</code> 时 -&gt; 使用 JSON.parse 解析，并返回json，如 <code>const pkg = require(&#39;./package.json&#39;)</code></li><li>处理 <code>.node</code> (是一个C++ Addon插件)时 -&gt; 使用 process.dlopen 打开</li><li>处理其他格式文件时 -&gt; 会当成 <code>.js</code> 文件处理，比如 <code>require(&#39;./file.txt&#39;)</code> 或 <code>require(&#39;./readme.md&#39;)</code></li></ul><h4 id="npmlog-定制" tabindex="-1">npmlog 定制 <a class="header-anchor" href="#npmlog-定制" aria-label="Permalink to &quot;npmlog 定制&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> log</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;npmlog&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自定义log</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addLevel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { fg: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;green&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addLevel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;success&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { fg: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;green&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, bold: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">log.level </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;verbose&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="_06-node项目如何支持esmodule" tabindex="-1">06-Node项目如何支持ESModule <a class="header-anchor" href="#_06-node项目如何支持esmodule" aria-label="Permalink to &quot;06-Node项目如何支持ESModule&quot;">​</a></h2><ul><li>webpack 配置 <code>babel-loader</code></li><li>node 最新功能 <code>.mjs</code></li></ul><h2 id="本周作业" tabindex="-1">本周作业 <a class="header-anchor" href="#本周作业" aria-label="Permalink to &quot;本周作业&quot;">​</a></h2><ul><li>标准 <ul><li>绘制 imooc-cli 脚手架架构设计图</li><li>实现 imooc-cli 脚手架准备过程代码</li><li>通过 commander 框架实现一个脚手架，包含自定义 option 和 command 功能</li></ul></li><li>进阶 <ul><li>通过 webpack 和 原生两种方式实现 Node 对 ESModule 的支持</li></ul></li></ul>`,58)]))}const g=i(h,[["render",p]]);export{o as __pageData,g as default};
