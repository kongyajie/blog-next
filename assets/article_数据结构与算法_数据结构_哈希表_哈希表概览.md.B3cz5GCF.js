import{_ as t,c as r,o as a,ae as l}from"./chunks/framework.Dh1jimFm.js";const _=JSON.parse('{"title":"哈希表概览","description":"","frontmatter":{},"headers":[],"relativePath":"article/数据结构与算法/数据结构/哈希表/哈希表概览.md","filePath":"article/数据结构与算法/数据结构/哈希表/哈希表概览.md","lastUpdated":1743859882000}'),o={name:"article/数据结构与算法/数据结构/哈希表/哈希表概览.md"};function n(i,e,c,p,s,E){return a(),r("div",null,e[0]||(e[0]=[l('<h1 id="哈希表概览" tabindex="-1">哈希表概览 <a class="header-anchor" href="#哈希表概览" aria-label="Permalink to &quot;哈希表概览&quot;">​</a></h1><p>哈希的基本原理是将给定的键值转换为偏移地址来检索记录。</p><p>键转换为地址是通过一种关系（公式）来完成的，这就是哈希（散列）函数。</p><p>虽然哈希表是一种有效的搜索技术，但是它还有些缺点。两个不同的关键字，由于哈希函数值相同，因而被映射到同一表位置上。该现象称为冲突。发生冲突的两个关键字称为该哈希函数的同义词。</p><p><img src="https://i.loli.net/2019/08/18/B2Ss9kyndzZ1LCA.png" alt=""></p><blockquote><p>如何设计哈希函数以及如何避免冲突就是哈希表的常见问题。 好的哈希函数的选择有两条标准：</p></blockquote><ul><li>1.简单并且能够快速计算</li><li>2.能够在址空间中获取键的均匀人分布</li></ul><p>例如下面的题目：</p><ul><li><a href="https://leetcode-cn.com/problems/insert-delete-getrandom-o1/" target="_blank" rel="noreferrer">常数时间插入、删除和获取随机元素</a></li></ul><blockquote><p>当用到哈希表时我们通常是要开辟一个额外空间来记录一些计算过的值，同时我们又要在下一次计算的过程中快速检索到它们，例如上面提到的两数之和、三数之和等都利用了这种思想。</p></blockquote><ul><li><a href="http://www.conardli.top/docs/dataStructure/%E6%95%B0%E7%BB%84/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.html" target="_blank" rel="noreferrer">两数之和</a></li><li><a href="http://www.conardli.top/docs/dataStructure/%E6%95%B0%E7%BB%84/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.html" target="_blank" rel="noreferrer">三数之和</a></li><li><a href="http://www.conardli.top/docs/dataStructure/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%97%E7%AC%A6%E6%B5%81%E4%B8%AD%E7%AC%AC%E4%B8%80%E4%B8%AA%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%97%E7%AC%A6.html#%E6%80%9D%E8%B7%AF" target="_blank" rel="noreferrer">字符流中第一个不重复的字符</a></li><li><a href="https://leetcode-cn.com/problems/jewels-and-stones/" target="_blank" rel="noreferrer">宝石与石头</a></li></ul>',11)]))}const B=t(o,[["render",n]]);export{_ as __pageData,B as default};
