import{_ as r,c as a,o as l,ae as o}from"./chunks/framework.Dh1jimFm.js";const _=JSON.parse('{"title":"JS异常处理","description":"","frontmatter":{},"headers":[],"relativePath":"article/前端基础/JS进阶/JS异常处理.md","filePath":"article/前端基础/JS进阶/JS异常处理.md","lastUpdated":1743862747000}'),t={name:"article/前端基础/JS进阶/JS异常处理.md"};function i(n,e,d,c,h,s){return l(),a("div",null,e[0]||(e[0]=[o('<h1 id="js异常处理" tabindex="-1">JS异常处理 <a class="header-anchor" href="#js异常处理" aria-label="Permalink to &quot;JS异常处理&quot;">​</a></h1><h2 id="异常分类" tabindex="-1">异常分类 <a class="header-anchor" href="#异常分类" aria-label="Permalink to &quot;异常分类&quot;">​</a></h2><p>ECMA-262 中定义了下列7种错误类型：</p><ul><li>Error：错误的基类，其他错误都继承自该类型</li><li>EvalError：Eval函数执行异常</li><li>RangError: 数组越界</li><li>ReferenceError：尝试引用一个未被定义的变量时，将会抛出此异常</li><li>SyntaxError：语法解析不合理</li><li>TypeError：类型错误，用来表示值的类型非预期类型时发生的错误</li><li>URIError：以一种错误的方式使用全局URI处理函数而产生的错误</li></ul><h2 id="异常处理" tabindex="-1">异常处理 <a class="header-anchor" href="#异常处理" aria-label="Permalink to &quot;异常处理&quot;">​</a></h2><ul><li>try-catch</li></ul><p>需根据不同的业务场景采用不同的处理策略</p><h2 id="异常捕获" tabindex="-1">异常捕获 <a class="header-anchor" href="#异常捕获" aria-label="Permalink to &quot;异常捕获&quot;">​</a></h2><ul><li><code>try-catch</code></li><li><code>window.onerror</code></li><li><code>window.addEventListener(&#39;error&#39;, e =&gt; {})</code></li><li><code>window.addEventListener(&#39;unhandledrejection&#39;, e =&gt; {})</code></li><li><code>vue.config.errorHandler = () =&gt; {}</code></li><li><code>react errorBoundry错误边界组件包裹</code></li></ul><p><a href="https://codepen.io/RealAaron/pen/MWvrWGW?editors=1010" target="_blank" rel="noreferrer">codepen-异常捕获示例</a></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li>可疑区域增加 <code>try-catch</code></li><li>全局监控 JS 异常 <code>window.onerror</code></li><li>全局监控静态资源异常 <code>window.addEventListener(&#39;error&#39;)</code></li><li>捕获没有 catch 的 Promise 异常用 <code>window.addEventListener(&#39;unhandledrejection&#39;)</code></li><li><code>Vue.configerrorHandler</code> 和 React errorBoundry错误边界组件 <code>componentDidCatch</code></li><li>Axios 请求统一异常处理用拦截器 interceptors</li><li>使用日志监控服务收集用户错误信息</li></ul><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://segmentfault.com/a/1190000022607559" target="_blank" rel="noreferrer">从 0 到 1 搭建前端异常监控系统</a></li><li><a href="https://segmentfault.com/a/1190000039264963" target="_blank" rel="noreferrer">前端异常的捕获与处理</a></li><li><a href="https://segmentfault.com/a/1190000022977773" target="_blank" rel="noreferrer">你不知道的前端异常处理（万字长文，建议收藏）</a></li></ul>',14)]))}const f=r(t,[["render",i]]);export{_ as __pageData,f as default};
