import{_ as i,c as a,o as e,ae as o}from"./chunks/framework.Dh1jimFm.js";const b=JSON.parse('{"title":"前端面试准备","description":"","frontmatter":{},"headers":[],"relativePath":"article/前端自检/查漏补缺.md","filePath":"article/前端自检/查漏补缺.md","lastUpdated":1743859882000}'),r={name:"article/前端自检/查漏补缺.md"};function t(n,l,h,u,s,d){return e(),a("div",null,l[0]||(l[0]=[o('<h1 id="前端面试准备" tabindex="-1">前端面试准备 <a class="header-anchor" href="#前端面试准备" aria-label="Permalink to &quot;前端面试准备&quot;">​</a></h1><h2 id="一、导学" tabindex="-1">一、导学 <a class="header-anchor" href="#一、导学" aria-label="Permalink to &quot;一、导学&quot;">​</a></h2><blockquote><p>高效、快速的刷完前端面试100题</p></blockquote><ul><li><p>工作能力 != 面试能力</p></li><li><p>面试考察的也不全是工作内容</p></li><li><p>工作是工作，面试时面试</p></li></ul><h3 id="课程介绍" tabindex="-1">课程介绍 <a class="header-anchor" href="#课程介绍" aria-label="Permalink to &quot;课程介绍&quot;">​</a></h3><ul><li>刷题，应该从哪些方面入手？</li><li>和其他免费刷题资料，有什么区别？</li></ul><h3 id="刷题-应该从哪些方面入手" tabindex="-1">刷题，应该从哪些方面入手？ <a class="header-anchor" href="#刷题-应该从哪些方面入手" aria-label="Permalink to &quot;刷题，应该从哪些方面入手？&quot;">​</a></h3><blockquote><p>作为面试官，面试结束后对候选人做评价</p></blockquote><p>综合能力要求：</p><ul><li><strong>数据结构与算法</strong></li><li><strong>前端基础知识</strong></li><li><strong>知识深度</strong></li><li><strong>知识广度</strong></li><li><strong>实际工作经验</strong></li><li><strong>编写高质量代码</strong></li><li><strong>分析和解决问题</strong></li><li><strong>项目设计</strong></li><li><strong>软技能</strong></li></ul><p>面试连环问：</p><ul><li>根据 for ... of ，连环问 for await ... of</li><li>根据 cookie ，连环问 session ；根据 token ，连环问 JWT</li><li>根据 Vue 的优化，连环问 React 优化</li></ul><h3 id="看免费的刷题资料可以吗" tabindex="-1">看免费的刷题资料可以吗？ <a class="header-anchor" href="#看免费的刷题资料可以吗" aria-label="Permalink to &quot;看免费的刷题资料可以吗？&quot;">​</a></h3><ul><li>题目、答案都是零散的，没有统一和权威的解答</li><li>不具备全面、完整、体系化，更无法匹配企业人才需求</li><li>甚至会误导你</li><li><strong>免费的，才是最贵的</strong></li></ul><h3 id="讲解方式" tabindex="-1">讲解方式 <a class="header-anchor" href="#讲解方式" aria-label="Permalink to &quot;讲解方式&quot;">​</a></h3><ul><li>列出所有常见答案，分析逻辑和性能，找出<strong>最优解</strong></li><li>关注<strong>代码质量</strong>（编码规范性，功能完整性，鲁棒性）</li><li>写<strong>单元测试</strong>来统一验证各个功能</li></ul><h3 id="学习收获" tabindex="-1">学习收获 <a class="header-anchor" href="#学习收获" aria-label="Permalink to &quot;学习收获&quot;">​</a></h3><ul><li>刷完常考的面试真题</li><li>学会分析和解决问题的思路</li><li>开始编写高质量代码</li></ul><h3 id="学习前提" tabindex="-1">学习前提 <a class="header-anchor" href="#学习前提" aria-label="Permalink to &quot;学习前提&quot;">​</a></h3><ul><li><p>熟悉HTML CSS JS</p></li><li><p>了解 Vue React</p></li><li><p>了解 Node</p></li></ul><h3 id="最后" tabindex="-1">最后 <a class="header-anchor" href="#最后" aria-label="Permalink to &quot;最后&quot;">​</a></h3><ul><li>程序员领域是世界上最公平的职业领域</li><li>技能越强，技术约好，工资就越高</li><li>努力掌握面试技巧，专业技能就一定能被公司应聘到</li></ul><h2 id="二、数据结构与算法" tabindex="-1">二、数据结构与算法 <a class="header-anchor" href="#二、数据结构与算法" aria-label="Permalink to &quot;二、数据结构与算法&quot;">​</a></h2><h3 id="为何要考察" tabindex="-1">为何要考察 <a class="header-anchor" href="#为何要考察" aria-label="Permalink to &quot;为何要考察&quot;">​</a></h3><ul><li>辨别优秀工程师（考虑鉴别成本 + 成功率）</li><li>前端范围越来越广，要求越来越高</li></ul><h3 id="考察重点" tabindex="-1">考察重点 <a class="header-anchor" href="#考察重点" aria-label="Permalink to &quot;考察重点&quot;">​</a></h3><ul><li>算法复杂度：时间、空间</li><li>算法思维：贪心、二分、动态规划</li><li>常见数据结构</li></ul><h3 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><ul><li>本章有点难度（大厂面试标准），要耐心学习</li><li>一个问题的解决方案有很多，要找出最优解（重要！）</li><li>不仅关注题目本身，还要关注分析解决问题的思路和方法</li></ul><h3 id="面试题" tabindex="-1">面试题 <a class="header-anchor" href="#面试题" aria-label="Permalink to &quot;面试题&quot;">​</a></h3><ul><li>题目1：将一个数组旋转k步</li><li>题目2：快速排序</li><li>题目3：判断字符串是否括号匹配（数组模拟栈）</li><li>题目4：反转单向链表</li><li>题目5：二分法查找（双指针法）</li><li>题目6：两数之和（嵌套法、双指针法）</li><li>题目7：二叉树的前中后序遍历（前中后表示root的顺序）</li><li>题目8：二叉树搜索树的第K小值（BST）</li><li>题目9：求斐波那契数列的第n值</li><li>题目10：快速排序（quickSort、O(nLogn)、splice/slice）</li><li>题目11：获取1-10000之间所有的对称数（回文数） <ul><li>思路一：转换成字符串，再转换成数组，reverse().join() 后对比字符串</li><li>思路二：<strong>转换成字符串，前后指针对比收缩</strong></li><li>思路三：纯数字公式翻转，后对比</li></ul></li><li>题目：DFS深度优先遍历、BFS广度优先遍历</li></ul><h3 id="栈" tabindex="-1">栈 <a class="header-anchor" href="#栈" aria-label="Permalink to &quot;栈&quot;">​</a></h3><blockquote><p>后进先出</p></blockquote><h3 id="队列" tabindex="-1">队列 <a class="header-anchor" href="#队列" aria-label="Permalink to &quot;队列&quot;">​</a></h3><blockquote><p>先进先出</p></blockquote><h3 id="链表" tabindex="-1">链表 <a class="header-anchor" href="#链表" aria-label="Permalink to &quot;链表&quot;">​</a></h3><h3 id="二叉树" tabindex="-1">二叉树 <a class="header-anchor" href="#二叉树" aria-label="Permalink to &quot;二叉树&quot;">​</a></h3><ul><li>数组、链表，各有各的缺点</li><li>平衡二叉树（BBST）可以让整体效果最优</li><li>各种高级二叉树，继续优化，满足不同场景</li><li>完全二叉树、满二叉树</li></ul><h3 id="堆" tabindex="-1">堆 <a class="header-anchor" href="#堆" aria-label="Permalink to &quot;堆&quot;">​</a></h3><blockquote><p>JS代码执行时，值类型变量，存储在栈；引用类型变量，存储在堆</p></blockquote><p>堆 vs BST</p><ul><li>查询比 BST 慢</li><li>增删比 BST 快，维持平衡更快</li><li>但整体的时间复杂度都是在 O(logn)级别，即树的高度</li></ul><p>堆的使用场景</p><ul><li>特别适合“堆栈模型”</li><li>堆的数据，都是在栈中引用的，不需要从root遍历</li><li>堆恰巧是数组形式，根据栈的地址，可用 O(1) 找到目标</li></ul><p>小结</p><ul><li>堆栈模型，堆的场景</li><li>堆的特点，堆和 BST</li><li>堆的逻辑结构和物理结构</li></ul><h2 id="七、实际工作经验" tabindex="-1">七、实际工作经验 <a class="header-anchor" href="#七、实际工作经验" aria-label="Permalink to &quot;七、实际工作经验&quot;">​</a></h2><h3 id="h5页面如何进行首屏优化" tabindex="-1">H5页面如何进行首屏优化 <a class="header-anchor" href="#h5页面如何进行首屏优化" aria-label="Permalink to &quot;H5页面如何进行首屏优化&quot;">​</a></h3><ul><li><strong>路由懒加载</strong></li><li><strong>图片懒加载</strong></li><li><strong>服务端渲染 SSR</strong></li><li>APP预取</li><li>分页</li><li>Hybrid</li><li><strong>骨架屏、loading动画</strong></li></ul><h2 id="常见的设计模式" tabindex="-1">常见的设计模式 <a class="header-anchor" href="#常见的设计模式" aria-label="Permalink to &quot;常见的设计模式&quot;">​</a></h2><ul><li>工厂模式</li><li>单例模式</li><li>观察者模式/发布订阅模式</li></ul><p>（ 详见设计模式文章）</p><h2 id="实际工作中-对vue做过哪些优化" tabindex="-1">实际工作中，对Vue做过哪些优化 <a class="header-anchor" href="#实际工作中-对vue做过哪些优化" aria-label="Permalink to &quot;实际工作中，对Vue做过哪些优化&quot;">​</a></h2><ul><li>v-if 和 v-show</li><li>v-for 使用 key</li><li>computed 缓存数据</li><li>keep-alive 缓存组件</li><li>异步组件 路由懒加载</li><li>SSR</li></ul><h3 id="使用vue遇到过哪些坑" tabindex="-1">使用Vue遇到过哪些坑？ <a class="header-anchor" href="#使用vue遇到过哪些坑" aria-label="Permalink to &quot;使用Vue遇到过哪些坑？&quot;">​</a></h3><ul><li>内存泄露：全局变量，全局事件，全局定时器，自定义事件</li><li>Vue2响应式的缺陷（Vue3不再有）：Vue.$set、Vue.$delete、数据未定义</li><li>路由切换时 scroll 到顶部</li></ul><h3 id="工作中遇到的冲突" tabindex="-1">工作中遇到的冲突 <a class="header-anchor" href="#工作中遇到的冲突" aria-label="Permalink to &quot;工作中遇到的冲突&quot;">​</a></h3><ul><li><strong>需求变更</strong>：产品或老板提出了新的需求（开会讨论评估 + 预留一些空间30%）</li><li><strong>资源延期</strong>：开发依赖的资源（设计素材、合同附件）延期了（提前跟进资源）</li><li><strong>接口定义冲突</strong>：如感觉服务端给的接口格式不合理（面对面讨论沟通）</li></ul><h2 id="九、分析和解决问题" tabindex="-1">九、分析和解决问题 <a class="header-anchor" href="#九、分析和解决问题" aria-label="Permalink to &quot;九、分析和解决问题&quot;">​</a></h2><ul><li><code>[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;].map(parseInt)// 1, NaN, NaN</code></li></ul><h2 id="十、项目设计" tabindex="-1">十、项目设计 <a class="header-anchor" href="#十、项目设计" aria-label="Permalink to &quot;十、项目设计&quot;">​</a></h2><h3 id="几个面试题" tabindex="-1">几个面试题 <a class="header-anchor" href="#几个面试题" aria-label="Permalink to &quot;几个面试题&quot;">​</a></h3><ul><li>要你开发一个前端统计SDK，你会如何设计？</li><li>一个H5编辑器（低代码），提交到服务端的数据格式怎样设计？</li><li>让你做团队的技术选型，你会考虑什么？</li></ul><h3 id="_1、前端统计sdk设计" tabindex="-1">1、前端统计SDK设计 <a class="header-anchor" href="#_1、前端统计sdk设计" aria-label="Permalink to &quot;1、前端统计SDK设计&quot;">​</a></h3><p>统计范围</p><ul><li>访问量PV</li><li>自定义事件</li><li>性能，错误</li></ul><p>发送数据使用 <code>&lt;img&gt;</code></p><p>报错统计要结合 Vue React 报错</p><p>2、H5低代码数据模型定义</p><ul><li>vnode标准</li><li>vuex</li></ul><p>3、技术选型的依据</p><ul><li>社区是否足够成熟</li><li>公司是否已有经验积累</li><li>团队成员的学习成本</li></ul><h2 id="十一、软技能" tabindex="-1">十一、软技能 <a class="header-anchor" href="#十一、软技能" aria-label="Permalink to &quot;十一、软技能&quot;">​</a></h2><h3 id="看过红宝书吗" tabindex="-1">看过红宝书吗 <a class="header-anchor" href="#看过红宝书吗" aria-label="Permalink to &quot;看过红宝书吗&quot;">​</a></h3><h3 id="如何做code-review" tabindex="-1">如何做Code-Review <a class="header-anchor" href="#如何做code-review" aria-label="Permalink to &quot;如何做Code-Review&quot;">​</a></h3><p>考虑的内容：</p><ul><li><strong>代码规范</strong>（eslint 不能全检查，如变量命名、代码语义）</li><li><strong>重复的代码要抽离、复用</strong></li><li>单个函数内容过长，需要拆分</li><li>算法复杂度是否可用？是否可继续优化</li><li>是否有安全漏洞？</li><li><strong>扩展性如何？</strong>（不用为了扩展而扩展，不封闭即可）</li><li><strong>是否和现有的功能重复了？</strong></li><li>是否有完善的单元测试？</li><li><strong>组件设计是否合理？</strong></li></ul><p>时机：</p><ul><li><strong>提交PR（或MR）时，通过代码diff进行Code review</strong></li><li><strong>每周例行一次集体 Code review</strong></li></ul><p>持续优化：</p><ul><li>每次 Code review 的问题要记录下</li><li>归纳整理，形成自己的代码规范体系</li><li><strong>新加入的成员要提前学习，提前规避（新手上路）</strong></li></ul><h3 id="如何学习一门新语言" tabindex="-1">如何学习一门新语言 <a class="header-anchor" href="#如何学习一门新语言" aria-label="Permalink to &quot;如何学习一门新语言&quot;">​</a></h3><p>考虑内容：</p><ul><li>它的优势和应用场景（nodejs单线程高并发、js开发人员服务端）</li><li>语法（常量，变量，数据类型，运算符，函数等）</li><li>内置模块和API（功能价值）</li><li>常用的第三方框架和库</li><li>开发环境和调试工具</li><li>线上环境和发布过程</li></ul><h3 id="不足之处" tabindex="-1">不足之处 <a class="header-anchor" href="#不足之处" aria-label="Permalink to &quot;不足之处&quot;">​</a></h3><ul><li>xx不足</li><li>意识到，怎么改进</li></ul>',86)]))}const q=i(r,[["render",t]]);export{b as __pageData,q as default};
