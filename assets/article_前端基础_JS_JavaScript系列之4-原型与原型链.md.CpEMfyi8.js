import{_ as a,c as s,o as t,ae as l}from"./chunks/framework.Dh1jimFm.js";const k=JSON.parse('{"title":"JavaScript系列之4-原型与原型链","description":"","frontmatter":{},"headers":[],"relativePath":"article/前端基础/JS/JavaScript系列之4-原型与原型链.md","filePath":"article/前端基础/JS/JavaScript系列之4-原型与原型链.md","lastUpdated":1743862747000}'),e={name:"article/前端基础/JS/JavaScript系列之4-原型与原型链.md"};function n(r,i,o,p,h,c){return t(),s("div",null,i[0]||(i[0]=[l(`<h1 id="javascript系列之4-原型与原型链" tabindex="-1">JavaScript系列之4-原型与原型链 <a class="header-anchor" href="#javascript系列之4-原型与原型链" aria-label="Permalink to &quot;JavaScript系列之4-原型与原型链&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><blockquote><p><strong>编程范型、编程范式或程序设计法</strong>（英语：Programming paradigm），是指软件工程中的一类典型的编程风格。常见的编程范型有：函数式编程、指令式编程、过程式编程、面向对象编程等等。 —— <a href="https://zh.wikipedia.org/wiki/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%9E%8B" target="_blank" rel="noreferrer">维基百科</a></p></blockquote><p>JavaScript是基于<strong>原型编程范式</strong>来实现面向对象的。原型编程范式的核心思想就是<strong>利用实例来描述对象，用实例作为定义对象和继承的基础</strong>。</p><p>在 JavaScript 中，原型编程范式的体现就是基于原型链的继承。这其中，对原型、原型链的理解是关键。</p><p>本文分为以下几个部分：</p><ul><li>原型和原型链案例</li><li>JavaScript是如何设计对象的？</li><li>JavaScript是如何实现面向对象的？</li><li>对象的创建</li><li>对象的继承</li></ul><h2 id="一、原型和原型链案例" tabindex="-1">一、原型和原型链案例 <a class="header-anchor" href="#一、原型和原型链案例" aria-label="Permalink to &quot;一、原型和原型链案例&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">funciton </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name, age) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;吃饭&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Aaron&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">31</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><img src="https://oss-1252175178.cos.ap-shanghai.myqcloud.com/JS%E5%8E%9F%E5%9E%8B%E9%93%BE.png" alt=""></p><ul><li>构造函数 <code>Person</code></li><li>原型 <code>Person.prototype</code></li><li>原型的构造函数 <code>Person.prototype.constructor</code></li><li>实例的原型属性 <code>person.__proto__</code></li><li>原型的原型属性 <code>Person.prototype.__proto__</code></li></ul><h2 id="二、javascript是如何设计对象的" tabindex="-1">二、JavaScript是如何设计对象的？ <a class="header-anchor" href="#二、javascript是如何设计对象的" aria-label="Permalink to &quot;二、JavaScript是如何设计对象的？&quot;">​</a></h2><p>我们知道对象的三要素有：</p><ul><li>唯一性：即使完全相同的两个对象，也并非同一个对象</li><li>状态：对象的状态，同一对象可能处于不同的状态之下</li><li>行为：可能因为行为产生状态变迁</li></ul><p>而JavaScript设计对象时，将对象设计成为了：<strong>具有高度动态性的属性集合</strong>。具体表现在：</p><ol><li>将状态和行为抽象成了属性</li><li>支持动态添加状态和行为</li></ol><p>为了支持上述的设计，JavaScript的属性被设计成两类：<strong>数据属性</strong> 和 <strong>访问器属性</strong>，而且通过一组特征来描述属性：</p><ul><li><strong>数据属性</strong>，接近其他语言的属性概念，通常我们定义的都是数据属性 <ul><li>value：属性的值</li><li>writable：决定属性能否被赋值</li><li>enumerable：决定 for in 能否枚举该属性</li><li>configurable：决定该属性能否被删除或者改变特征值</li></ul></li><li><strong>访问器属性</strong>，可以通过 Object.defineProperty 来定义 <ul><li>getter：函数或 undefined，在取属性值时被调用</li><li>setter：函数或 undefined，在设置属性值时被调用</li><li>enumerable：决定 for in 能否枚举该属性</li><li>configurable：决定该属性能否被删除或者改变特征值 用 Object.getOwnPropertyDescriptor 来查看属性的特征</li></ul></li></ul><p><strong>综上，实际上 JavaScript 对象的运行时是一个“属性的集合”，属性以字符串或者 Symbol 为 key，以数据属性特征值或者访问器属性特征值为 value。</strong></p><h2 id="三、javascript是如何实现面向对象的" tabindex="-1">三、JavaScript是如何实现面向对象的？ <a class="header-anchor" href="#三、javascript是如何实现面向对象的" aria-label="Permalink to &quot;三、JavaScript是如何实现面向对象的？&quot;">​</a></h2><blockquote><p>JavaScript是基于原型的面向对象语言</p></blockquote><h3 id="_1、基于原型vs基于类" tabindex="-1">1、基于原型vs基于类 <a class="header-anchor" href="#_1、基于原型vs基于类" aria-label="Permalink to &quot;1、基于原型vs基于类&quot;">​</a></h3><ul><li>JavaScript 使用了基于原型的方式实现面向对象，而不是基于类的方式。</li><li>由于公司政治原因，JavaScript 推出之时，管理层就要求它去模仿 Java，Brendan Eich在原型基础上引入了new、this等语言特性，使之语法看起来更像Java。</li><li>基于原型和基于类都能够满足基本的复用和抽象需求，它们的区别在于：基于原型强调行为，基于类则强调分类。猫-&gt;老虎（大猫），猫-&gt;老虎（猫科动物）</li></ul><h3 id="_2、原型系统" tabindex="-1">2、原型系统 <a class="header-anchor" href="#_2、原型系统" aria-label="Permalink to &quot;2、原型系统&quot;">​</a></h3><p>抛开Java类的复杂语法设施(new、Function Object、函数的prototype属性等),其实原型系统相当简单:</p><ul><li>对象的原型上都有私有字段<code>[[prototype]]</code></li><li>对象上读取一个属性，如果当前对象本身没有，则会继续访问对象的原型，直到找到或原型为空为止</li></ul><p>早前，程序员只能通过Java风格的类接口来操纵原型运行时，ES6则提供内置函数来操纵原型：</p><ul><li><code>Object.create</code> 根据指定的原型创建新对象，原型可以是null</li><li><code>Object.getPrototypeOf</code> 获得一个对象的原型</li><li><code>Object.setPrototypeOf</code> 设置一个对象的原型</li></ul><h3 id="_3、javascript中的类" tabindex="-1">3、JavaScript中的类 <a class="header-anchor" href="#_3、javascript中的类" aria-label="Permalink to &quot;3、JavaScript中的类&quot;">​</a></h3><ul><li><p>ES3以前很弱，仅仅是运行时的一个私有字符串属性<code>[[class]]</code>，通过<code>Object.prototype.toString</code> 获取</p></li><li><p>ES5开始，<code>[[class]]</code> 被 <code>Symbol.toStringTag</code> 代替，<code>Object.prototype.toString</code> 的意义从命名上不再跟 class 相关</p></li><li><p><code>new</code> 可以理解为JavaScript面向对象的一部分，new运算接收一个构造器和一组调用函数，实际上做了几件事：</p><ol><li>以构造器的 prototype 属性为原型，创建新对象；</li><li>将 this 和调用参数传给构造器，执行；</li><li>如果构造器返回的是对象，则返回，否则返回第一步创建的对象。</li></ol></li><li><p>ES6加入了新特性 <code>class</code> ，<code>new</code> 跟 <code>function</code> 搭配的怪异行为终于可以退休了（虽然运行时没有变），在任何场景，都推荐使用ES6的语法来定义类，而令<code>function</code> 回归原本的函数语义。</p></li></ul><h2 id="对象的创建" tabindex="-1">对象的创建 <a class="header-anchor" href="#对象的创建" aria-label="Permalink to &quot;对象的创建&quot;">​</a></h2><h2 id="对象的继承" tabindex="-1">对象的继承 <a class="header-anchor" href="#对象的继承" aria-label="Permalink to &quot;对象的继承&quot;">​</a></h2><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2>`,34)]))}const E=a(e,[["render",n]]);export{k as __pageData,E as default};
