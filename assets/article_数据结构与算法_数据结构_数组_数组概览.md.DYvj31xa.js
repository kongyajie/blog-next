import{_ as l,c as e,o as t,ae as i}from"./chunks/framework.Dh1jimFm.js";const d=JSON.parse('{"title":"数组概览","description":"","frontmatter":{},"headers":[],"relativePath":"article/数据结构与算法/数据结构/数组/数组概览.md","filePath":"article/数据结构与算法/数据结构/数组/数组概览.md","lastUpdated":1743859882000}'),r={name:"article/数据结构与算法/数据结构/数组/数组概览.md"};function h(o,a,c,n,u,s){return t(),e("div",null,a[0]||(a[0]=[i('<h1 id="数组概览" tabindex="-1">数组概览 <a class="header-anchor" href="#数组概览" aria-label="Permalink to &quot;数组概览&quot;">​</a></h1><h2 id="双指针" tabindex="-1">双指针 <a class="header-anchor" href="#双指针" aria-label="Permalink to &quot;双指针&quot;">​</a></h2><blockquote><p>主要是利用两个或多个不同位置的指针，通过速度和方向的变换解决问题。注意这种技巧经常在排序数组中使用</p></blockquote><ul><li><a href="./调整数组顺序使奇数位于偶数前面.html">调整数组顺序使奇数位于偶数前面</a></li><li><a href="./和为s的两个数字.html">和为s的两个数字</a></li><li><a href="./和为s的连续正数序列.html">和为s的连续正数序列</a></li></ul><h2 id="n数之和的问题" tabindex="-1">N数之和的问题 <a class="header-anchor" href="#n数之和的问题" aria-label="Permalink to &quot;N数之和的问题&quot;">​</a></h2><blockquote><p>非常常见的问题，基本上都是一个套路，主要考虑如何比暴利法降低时间复杂度，而且也会用到上面的双指针技巧</p></blockquote><ul><li><a href="./两数之和.html">两数之和</a></li><li><a href="./三数之和.html">三数之和</a></li><li><a href="./四数之和.html">四数之和</a></li></ul><h2 id="二维数组" tabindex="-1">二维数组 <a class="header-anchor" href="#二维数组" aria-label="Permalink to &quot;二维数组&quot;">​</a></h2><blockquote><p>建立一定的抽象建模能力，将实际中的很多问题进行抽象</p></blockquote><ul><li><a href="./构建乘积数组.html">构建乘积数组</a></li><li><a href="./顺时针打印矩阵.html">顺时针打印矩阵</a></li></ul><h2 id="数据统计" tabindex="-1">数据统计 <a class="header-anchor" href="#数据统计" aria-label="Permalink to &quot;数据统计&quot;">​</a></h2><blockquote><p>数组少不了的就是统计和计算，此类问题考察如何用更高效的方法对数组进行统计计算。</p></blockquote><ul><li><a href="./数组中出现次数超过数组长度一半的数字.html">数组中出现次数超过数组长度一半的数字</a></li><li><a href="./连续子数组的最大和.html">连续子数组的最大和</a></li><li><a href="./扑克牌顺子.html">扑克牌顺子</a></li><li><a href="./第一个只出现一次的字符.html">第一个只出现一次的字符</a></li></ul><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><ul><li><a href="./合并两个有序数组.html">合并两个有序数组（高频）</a></li><li><a href="./数组扁平化、去重、排序.html">数组扁平化、去重、排序</a></li><li><a href="./两个数组的交集.html">两个数组的交集</a></li><li><a href="./多个数组的交集.html">多个数组的交集</a></li><li><a href="./LRU缓存机制.html">LRU缓存机制</a></li></ul>',15)]))}const f=l(r,[["render",h]]);export{d as __pageData,f as default};
