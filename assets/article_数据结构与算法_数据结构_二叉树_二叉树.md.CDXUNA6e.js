import{_ as r,c as a,o as e,ae as E}from"./chunks/framework.Dh1jimFm.js";const u=JSON.parse('{"title":"二叉树","description":"","frontmatter":{},"headers":[],"relativePath":"article/数据结构与算法/数据结构/二叉树/二叉树.md","filePath":"article/数据结构与算法/数据结构/二叉树/二叉树.md","lastUpdated":1743859882000}'),l={name:"article/数据结构与算法/数据结构/二叉树/二叉树.md"};function o(A,t,i,c,n,d){return e(),a("div",null,t[0]||(t[0]=[E('<h1 id="二叉树" tabindex="-1">二叉树 <a class="header-anchor" href="#二叉树" aria-label="Permalink to &quot;二叉树&quot;">​</a></h1><p>树是用来模拟具有树状结构性质的数据集合。根据它的特性可以分为非常多的种类，对于我们来讲，掌握二叉树这种结构就足够了，它也是树最简单、应用最广泛的种类。</p><blockquote><p>二叉树是一种典型的树树状结构。如它名字所描述的那样，二叉树是每个节点最多有两个子树的树结构，通常子树被称作“左子树”和“右子树”。</p></blockquote><p><img src="https://i.loli.net/2019/08/18/3HdPxIMFOQv9yEz.jpg" alt=""></p><h3 id="二叉树遍历" tabindex="-1">二叉树遍历 <a class="header-anchor" href="#二叉树遍历" aria-label="Permalink to &quot;二叉树遍历&quot;">​</a></h3><blockquote><p>重点中的重点，最好同时掌握递归和非递归版本，递归版本很容易书写，但是真正考察基本功的是非递归版本。</p></blockquote><ul><li><a href="http://www.conardli.top/docs/dataStructure/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86.html" target="_blank" rel="noreferrer">二叉树的中序遍历</a></li><li><a href="http://www.conardli.top/docs/dataStructure/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86.html" target="_blank" rel="noreferrer">二叉树的前序遍历</a></li><li><a href="http://www.conardli.top/docs/dataStructure/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86.html" target="_blank" rel="noreferrer">二叉树的后序遍历</a></li></ul><blockquote><p>根据前序遍历和中序遍历的特点重建二叉树，逆向思维，很有意思的题目</p></blockquote><ul><li><a href="http://www.conardli.top/docs/dataStructure/%E4%BA%8C%E5%8F%89%E6%A0%91/%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91.html" target="_blank" rel="noreferrer">重建二叉树</a></li><li><a href="http://www.conardli.top/docs/dataStructure/%E4%BA%8C%E5%8F%89%E6%A0%91/%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91.html#%E9%A2%98%E7%9B%AE2-%E6%B1%82%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86" target="_blank" rel="noreferrer">求二叉树的遍历</a></li></ul><h3 id="二叉树的对称性" tabindex="-1">二叉树的对称性 <a class="header-anchor" href="#二叉树的对称性" aria-label="Permalink to &quot;二叉树的对称性&quot;">​</a></h3><ul><li><a href="http://www.conardli.top/docs/dataStructure/%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%AF%B9%E7%A7%B0%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91.html" target="_blank" rel="noreferrer">对称的二叉树</a></li><li><a href="http://www.conardli.top/docs/dataStructure/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F.html" target="_blank" rel="noreferrer">二叉树的镜像</a></li></ul><h3 id="二叉搜索树" tabindex="-1">二叉搜索树 <a class="header-anchor" href="#二叉搜索树" aria-label="Permalink to &quot;二叉搜索树&quot;">​</a></h3><blockquote><p>二叉搜索树是特殊的二叉树，考察二叉搜索树的题目一般都是考察二叉搜索树的特性，所以掌握好它的特性很重要。</p></blockquote><ol><li>若任意节点的左⼦子树不不空，则左⼦子树上所有结点的值均⼩小于它的 根结点的值;</li><li>若任意节点的右⼦子树不不空，则右⼦子树上所有结点的值均⼤大于它的 根结点的值;</li><li>任意节点的左、右⼦子树也分别为⼆二叉查找树。</li></ol><ul><li><a href="http://www.conardli.top/docs/dataStructure/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9.html#%E9%A2%98%E7%9B%AE" target="_blank" rel="noreferrer">二叉搜索树的第k个节点</a></li><li><a href="http://www.conardli.top/docs/dataStructure/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86.html" target="_blank" rel="noreferrer">二叉搜索树的后序遍历</a></li></ul><h3 id="二叉树的深度" tabindex="-1">二叉树的深度 <a class="header-anchor" href="#二叉树的深度" aria-label="Permalink to &quot;二叉树的深度&quot;">​</a></h3><blockquote><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p></blockquote><blockquote><p>平衡二叉树：左右子树深度之差大于1</p></blockquote><ul><li><a href="http://www.conardli.top/docs/dataStructure/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6.html" target="_blank" rel="noreferrer">二叉树的最大深度</a></li><li><a href="http://www.conardli.top/docs/dataStructure/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6.html#%E8%80%83%E5%AF%9F%E7%82%B9" target="_blank" rel="noreferrer">二叉树的最小深度</a></li><li><a href="http://www.conardli.top/docs/dataStructure/%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91.html" target="_blank" rel="noreferrer">平衡二叉树</a></li></ul>',19)]))}const B=r(l,[["render",o]]);export{u as __pageData,B as default};
