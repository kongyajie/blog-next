import{_ as n,c as t,o as e,ae as s,j as a,t as p}from"./chunks/framework.Dh1jimFm.js";const c=JSON.parse('{"title":"Vue系列之4-原理","description":"","frontmatter":{},"headers":[],"relativePath":"article/前端框架/vue/Vue系列之4-原理.md","filePath":"article/前端框架/vue/Vue系列之4-原理.md","lastUpdated":1743862747000}'),h={name:"article/前端框架/vue/Vue系列之4-原理.md"};function k(l,i,r,E,d,g){return e(),t("div",null,[i[0]||(i[0]=s(`<h1 id="vue系列之4-原理" tabindex="-1">Vue系列之4-原理 <a class="header-anchor" href="#vue系列之4-原理" aria-label="Permalink to &quot;Vue系列之4-原理&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><ul><li>前端三大框架对比</li></ul><table tabindex="0"><thead><tr><th>框架</th><th>发布年份</th><th>出自</th><th>star数</th><th>特性</th></tr></thead><tbody><tr><td>Angular</td><td>2010年</td><td>Google</td><td>73.7k</td><td>双向数据绑定</td></tr><tr><td>React</td><td>2013年</td><td>Facebook</td><td>169k</td><td>VirtualDOM、Redux</td></tr><tr><td>Vue</td><td>2014年</td><td>尤雨溪EvanYou</td><td>184k</td><td>更轻量、易于上手、中文文档友好</td></tr></tbody></table><ul><li><p>框架趋同/互相借鉴</p><ul><li>Vue借鉴knockout模板引擎、借鉴Angular双向数据绑定、借鉴React虚拟dom/redux/JSX</li><li>跨端开发（Ionic/ReactNative/Weex）</li><li>桌面开发（electron支持vue/react）</li><li>总之，你有我有全都有，大家好才是真的好</li></ul></li><li><p>类vue的开发模式（新赛道）：小程序、uniapp</p></li></ul><p>阅读本文后你将了解到：</p><ul><li>Vue是什么？解决了什么问题？</li><li>MVVM架构</li><li>三要素（响应式、模板编译、vdom/diff算法）</li><li>组件渲染/更新过程</li></ul><p>PS：本文内容主要针对Vue2，涉及少量vue3.0内容</p><h2 id="一、vue是什么" tabindex="-1">一、Vue是什么？ <a class="header-anchor" href="#一、vue是什么" aria-label="Permalink to &quot;一、Vue是什么？&quot;">​</a></h2><p><strong>vue是什么？</strong></p><blockquote><p>Vue (读音 /vjuː/，类似于 <strong>view</strong>) 是一套用于<strong>构建用户界面的渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与<strong>现代化的工具链以及各种支持类库</strong>结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p></blockquote><ul><li>轻量级渐进式框架（便于与第三方库或既有项目整合）</li><li>生态丰富（vue-cli、vue-router、vuex、社区UI组件库...）</li><li>易于上手（入门简单、中文文档友好）</li></ul><p><strong>vue解决了什么问题？</strong></p><ul><li><strong>HTML</strong>：从0到1</li><li><strong>CSS</strong>：提供装饰</li><li><strong>JavaScript(DOM)</strong>：支持页面动态化（例如倒计时）</li><li><strong>jQuery</strong>：解决浏览器兼容问题、优雅API（解放前端，造轮子）</li><li><strong>Vue</strong>：<strong>数据驱动视图</strong>，让开发者从DOM操作中解放（如倒计时，自加器）</li></ul><p><strong>疑问：数据驱动视图是怎么做到的？（数据变化 -&gt; 视图更新）</strong></p><h3 id="_1、如何理解mvvm" tabindex="-1">1、如何理解MVVM <a class="header-anchor" href="#_1、如何理解mvvm" aria-label="Permalink to &quot;1、如何理解MVVM&quot;">​</a></h3><blockquote><p>MVVM是一种软件架构模式，MVVM是MVP的变体，MVP模式和MVVM模式都是MVC模式的变体。<a href="http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html" target="_blank" rel="noreferrer">MVC，MVP 和 MVVM 的图示</a></p></blockquote><blockquote><p>软件构架对代码进行解耦分层，各层互不影响，有效降低了开发复杂度。我们可以通过调整MVC三者之前的通信模式，来达到一定的架构目的。</p></blockquote><p>MVVM对视图更新模式的影响</p><ul><li>静态渲染：更新需要进行DOM操作，如ASP/JSP/PHP，适合业务简单的场景</li><li>数据驱动视图：通过数据即可更新视图，如Vue/React/Angular，适合业务复杂的场景</li></ul><p>MVVM包含3部分：</p><ul><li><strong>View</strong>：用户看到屏幕的结构、布局和外观，也称UI</li><li><strong>ViewModel</strong>：是一个绑定器，能和 <code>View</code> 和 <code>Model</code> 层进行通信</li><li><strong>Model</strong>：是数据和逻辑</li></ul><h3 id="_2、mvvm在vue中的体现" tabindex="-1">2、MVVM在Vue中的体现 <a class="header-anchor" href="#_2、mvvm在vue中的体现" aria-label="Permalink to &quot;2、MVVM在Vue中的体现&quot;">​</a></h3><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a3e0fecfffa34c1f9e8d34572f52e7e2~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>示例：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ message }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;reverse&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;reverse&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> app </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    el: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello Vue123!!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      reverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.message.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><ul><li>View: template模板</li><li>Model: data数据</li><li>ViewModel: Vue实例</li></ul><p>PS：Vue没有严格遵循 MVVM 模式：严格的MVVM要求View不能和Model直接通信，而Vue在组件中提供了$refs这个属性，让Model可以直接操作View，违反了这一规定。</p><p><strong>疑问：vue是如何实现MVVM的？</strong></p><h3 id="_3、vue三要素" tabindex="-1">3、Vue三要素 <a class="header-anchor" href="#_3、vue三要素" aria-label="Permalink to &quot;3、Vue三要素&quot;">​</a></h3><ul><li>响应式：vue如何监听到 data 的每个属性变化？</li><li>模板引擎：vue的模板如何被解析？</li><li>渲染：vue如何进行高效渲染？</li></ul><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fa6b219179c14b13abd1d436703e2099~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="二、vue三要素-响应式" tabindex="-1">二、Vue三要素-响应式 <a class="header-anchor" href="#二、vue三要素-响应式" aria-label="Permalink to &quot;二、Vue三要素-响应式&quot;">​</a></h2><blockquote><p>响应式：组件 data 的数据一旦变化，立刻触发视图的更新。 响应式如何实现？</p></blockquote><h3 id="object-defineproperty-ie9" tabindex="-1">Object.defineProperty（IE9+） <a class="header-anchor" href="#object-defineproperty-ie9" aria-label="Permalink to &quot;Object.defineProperty（IE9+）&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;trigger get&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 收集依赖 todo...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;trigger set&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (val </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> val;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 数据变更，需要重新渲染 todo...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj.a);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj.a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>缺点</p><ul><li>深度监听需要递归到底，一次性计算量大</li><li>无法监听新增属性/删除属性（Vue.$set）</li><li>无法原生监听数组，需要特殊处理</li></ul><h3 id="proxy-vue3-0-ie11" tabindex="-1">proxy（Vue3.0，IE11+） <a class="header-anchor" href="#proxy-vue3-0-ie11" aria-label="Permalink to &quot;proxy（Vue3.0，IE11+）&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reactiveObj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">prop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;trigger get&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 收集依赖 todo...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj[prop];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">prop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;trigger set&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        obj[prop] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (obj[prop] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 数据变更，需要重新渲染 todo...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>缺点：</p><ul><li>有兼容性的问题，caniuse 95%</li><li>它会修改JavaScript的一些底层代码的执行方式，所以它是无法被完全polyfill的</li></ul><p>响应式带来的问题：</p><ul><li>jQuery可以自行控制DOM操作的时机，手动调整，而响应式的DOM操作则在内部进行；</li><li>DOM 操作非常耗费性能</li></ul><p><strong>疑问：如何有效控制DOM操作？</strong></p><h2 id="三、vue三要素-渲染-虚拟dom-virtual-dom" tabindex="-1">三、Vue三要素-渲染：虚拟DOM（Virtual DOM） <a class="header-anchor" href="#三、vue三要素-渲染-虚拟dom-virtual-dom" aria-label="Permalink to &quot;三、Vue三要素-渲染：虚拟DOM（Virtual DOM）&quot;">​</a></h2><blockquote><p>Vue是数据驱动视图，如何有效控制DOM操作？</p></blockquote><ul><li>解决方案：<code>vdom</code><ul><li>JS执行速度快</li><li>用JS模拟DOM结构，计算出最小的变更，操作DOM</li></ul></li><li><code>vdom</code> 是优化方案，不是响应式必须 <ul><li><code>vdom</code> 是实现 <code>vue</code> 和 <code>react</code> 的重要基石</li><li><code>diff算法</code> 是 <code>vdom</code> 中最核心、最关键的部分</li></ul></li><li>用JS模拟DOM结构：<code>vnode</code></li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;div1&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;container&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;vdom&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;font-size: 20px;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;a&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        classname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;container&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;div1&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    children</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            tag: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;p&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            children: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;vdom&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            tag: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ul&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            props: { style: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;font-size: 20px;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            children: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    tag: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;li&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    children: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>vdom</code> 小结：数据驱动视图的模式下，有效控制DOM操作 <ul><li><code>vnode</code>：用JS模拟DOM结构</li><li><code>diff算法</code>：新旧vnode对比，得出最小更新范围，最后更新DOM</li></ul></li></ul><h2 id="四、diff算法-vdom核心部分" tabindex="-1">四、diff算法-vdom核心部分 <a class="header-anchor" href="#四、diff算法-vdom核心部分" aria-label="Permalink to &quot;四、diff算法-vdom核心部分&quot;">​</a></h2><blockquote><p>diff 算法是一种通过同层的树节点进行比较的高效算法，避免了对树进行逐层搜索遍历，所以时间复杂度只有 O(n)</p></blockquote><h3 id="概述" tabindex="-1">概述： <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述：&quot;">​</a></h3><ul><li>diff即对比，是一个广泛的概念（非独创），如linux diff命令，git diff等</li><li>两个js对象也可以做diff</li><li>两棵树做diff，如这里的vdom diff</li></ul><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/286a4362483c4cafb3fb8615cefe94bc~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="树diff的时间复杂度o-n-3" tabindex="-1">树diff的时间复杂度O(n^3) <a class="header-anchor" href="#树diff的时间复杂度o-n-3" aria-label="Permalink to &quot;树diff的时间复杂度O(n^3)&quot;">​</a></h3><ul><li>1、遍历tree1</li><li>2、遍历tree2</li><li>3、排序</li><li>1000个节点，要计算1亿次，算法不可用</li></ul><h3 id="优化时间复杂度到o-n" tabindex="-1">优化时间复杂度到O(n) <a class="header-anchor" href="#优化时间复杂度到o-n" aria-label="Permalink to &quot;优化时间复杂度到O(n)&quot;">​</a></h3><ul><li>只比较同一层级，不跨级比较</li><li>tag不相同，则直接删掉重建，不再深度比较</li><li>tag和key，两者都相同，则认为是相同节点，更新dom，并继续比较节点的子元素</li></ul><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/39a203ea582649f5aba9bf27f86aada7~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/68ef124893964d349a15fa4f32759b2d~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="diff算法流程" tabindex="-1">diff算法流程 <a class="header-anchor" href="#diff算法流程" aria-label="Permalink to &quot;diff算法流程&quot;">​</a></h3><p>1、首次渲染，取vnode进行渲染即可</p><p>2、数据更新后，将vnode和oldVnode进行对比</p><ul><li>从根节点开始遍历，判断当前的旧节点和新节点是否同一节点（sel和key相同）</li><li>若不是同一节点，则删掉重建；</li><li>若是同一节点，则更新当前节点dom，继续处理子元素children</li></ul><p>3、<strong>子元素children的对比算法</strong>（尽可能多地复用真实DOM,尽可能少的添加删除真实DOM） 思路：添加4个指针，分别指向新旧children的开始和结束比较的过程中，循环从两边向中间收拢；</p><ul><li>第一步：分别进行开始开始、结束结束、开始结束、结束开始对比，若匹配成功，则指针向中间收拢；</li><li>第二步：若第一步未匹配，则在旧children中遍历查找是否匹配新children的开始节点，若匹配成功，则移动旧节点到对应位置；</li><li>第三步：循环结束后，根据新老节点的数目不同做相应的添加或者删除节点操作</li></ul><p>各场景图示（这里看动画 👉 <a href="https://www.bilibili.com/video/BV1b5411V7i3?from=search&amp;seid=4125072074822008044" target="_blank" rel="noreferrer">diff算法图解动画</a>）</p><ul><li>k -&gt; key</li><li>a/b/c/d -&gt; 元素内容</li><li>所有元素的tag都相同，可以理解均为 <code>&lt;li&gt;</code></li></ul><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d0d8dca6afe24cd795af2edc2be7e049~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5295957102da4ba2b13eb6c8c65b4f73~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9ee3dec92df84644982cfb237166e12c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e62d8912026f4bbf9f1975de26b8de73~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ad12f271b8484572b14e32048fbba20f~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>删除节点 <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4f94f32ebd3040c9bec27350e554f8cf~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>新增节点 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5bdb95ad733f414f9542a5ebb4ec9175~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>未设置key <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/027885ad98f7446d8eefa107c481c6a7~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>设置key <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/50d9e7701ad14f779de617fb3368fc3c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>需要说明的是，节点的更新有三种开销：</p><ul><li>第一种是不能复用节点时，重建节点，更新dom</li><li>第二种是能复用节点时，直接更新dom</li><li>第三种是能复用节点，但需移动dom，然后更新</li></ul><p>数组加key即符合第三种情况。</p><h2 id="五、vue三要素-模板编译" tabindex="-1">五、Vue三要素-模板编译 <a class="header-anchor" href="#五、vue三要素-模板编译" aria-label="Permalink to &quot;五、Vue三要素-模板编译&quot;">​</a></h2><ul><li><p>概览</p><ul><li>前置知识：JS的with语法 <ul><li>改变{}内自由变量的查找规则，当做obj属性来查找</li><li>如果找不到匹配的obj属性，就会报错</li><li>with要慎用，它打破了作用域规则，易读性变差</li></ul></li><li>vue模板(不是html，有指令、插值、JS表达式)到底是什么？</li><li>vue如何处理模板？组件渲染和更新过程？</li></ul></li><li><p>步骤：</p><ol><li><strong>vue-template-complier将模板<code>&lt;template&gt;</code>编译为 render 函数</strong></li><li><strong>执行 render 函数生成 vnode</strong></li><li>基于 vnode 再执行 patch 和 diff，进行渲染和更新</li><li>修改数据后，会生成新的vnode</li></ol></li><li><p>vue模板被编译成什么（ <code>vue-template-compiler</code> ）</p></li></ul>`,85)),a("p",null,[a("code",null,"<p>"+p(l.message)+"</p>",1)]),i[1]||(i[1]=s(`<p><code>with(this){return _c(&#39;p&#39;, [_v(_s(message))])}</code></p><p>类似于：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;p&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 标签名称</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.message.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 子节点数组</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span></code></pre></div><ul><li>其他注意点： <ul><li>使用webpack vue-loader，会在开发环境编译模板</li><li>vue组件可以用render代替template，react默认使用render写法</li></ul></li></ul><h2 id="六、vue的组件渲染-更新过程" tabindex="-1">六、Vue的组件渲染/更新过程 <a class="header-anchor" href="#六、vue的组件渲染-更新过程" aria-label="Permalink to &quot;六、Vue的组件渲染/更新过程&quot;">​</a></h2><ul><li>初次渲染过程 <ol><li>解析模板为render函数（或在开发环境已完成，vue-loader）</li><li>（页面渲染时）执行render函数，生成vnode，patch(elem,vnode)</li><li>触发响应式，监听data属性getter setter</li></ol></li><li>更新过程 <ol><li>修改data，触发setter（此前在getter中已被监听）</li><li>重新执行render函数，生成newVnode</li><li>对比新旧vnode，patch(vnode,newVnode)，更新到dom上</li></ol></li></ul><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/981c630c3aa8411d888a6c2442a88baa~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="七、vue3-0的性能优化" tabindex="-1">七、Vue3.0的性能优化 <a class="header-anchor" href="#七、vue3-0的性能优化" aria-label="Permalink to &quot;七、Vue3.0的性能优化&quot;">​</a></h2><blockquote><p>性能比vue2.x快1.2～2倍</p></blockquote><ul><li><p><strong>静态标记</strong>：diff方法优化vue2.x中的虚拟dom是进行全量的对比。而vue3.0新增了静态标记。在与上次虚拟节点进行对比的时候，只对比带有patch flag的节点，并且可以通过flag的信息得知当前节点要对比的具体内容。</p></li><li><p><strong>静态提升</strong>：vue2.x中无论元素是否参与更新，每次都会重新创建，然后再渲染。vue3.0中对于不参与更新的元素，会做静态提升，只会被创建一次，在渲染时直接复用即可。</p></li><li><p><strong>事件侦听器缓存</strong>：默认情况下，如onClick事件会被视为动态绑定，所以每次都会追踪它的变化，但是因为是同一个函数，所以不用追踪变化，直接缓存起来复用即可。</p></li></ul><h2 id="回顾" tabindex="-1">回顾 <a class="header-anchor" href="#回顾" aria-label="Permalink to &quot;回顾&quot;">​</a></h2><ul><li>Vue是什么？解决了什么问题？</li><li>MVVM架构</li><li>三要素：响应式、模板编译、vdom/diff算法（重要）</li><li>组件渲染/更新过程（重要）</li><li>异步渲染 <ul><li>$nextTick</li><li>汇总data的修改，一次性更新视图</li><li>减少DOM操作次数，提高性能</li></ul></li></ul><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://www.infoq.cn/article/udlcpkh4iqb0cr5wgy7f" target="_blank" rel="noreferrer">vue的diff算法执行过程解析</a></li><li><a href="https://www.bilibili.com/video/BV1b5411V7i3?from=search&amp;seid=4125072074822008044" target="_blank" rel="noreferrer">diff算法图解动画</a></li><li><a href="https://developer.51cto.com/art/202010/628347.htm" target="_blank" rel="noreferrer">Vue3.0是如何变快的</a></li></ul>`,14))])}const u=n(h,[["render",k]]);export{c as __pageData,u as default};
