import{_ as i,c as e,o as a,ae as o}from"./chunks/framework.Dh1jimFm.js";const u=JSON.parse('{"title":"jay-cli脚手架","description":"","frontmatter":{},"headers":[],"relativePath":"article/架构师课程/jay-cli脚手架.md","filePath":"article/架构师课程/jay-cli脚手架.md","lastUpdated":1743859882000}'),t={name:"article/架构师课程/jay-cli脚手架.md"};function r(n,l,c,s,d,p){return a(),e("div",null,l[0]||(l[0]=[o('<h1 id="jay-cli脚手架" tabindex="-1">jay-cli脚手架 <a class="header-anchor" href="#jay-cli脚手架" aria-label="Permalink to &quot;jay-cli脚手架&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><ul><li>猎萝⼘平台是公司核⼼项⽬，包含toC端和crm等多个中后台系统，多个系统间有许多可复用的部分，如eslint配置、网络请求模块、埋点模块等，而新系统的开发往往采用代码拷贝的方式，开发效率较低；</li><li>为了提高团队整体研发效率，本人作为前端负责人，搭建了公司内部的通用脚手架jay-cli。架构上使用commander 实现脚手架，lerna进行多包管理，性能上使用node多进程和本地缓存提高执行效率；</li><li>通过脚手架结合项目模板，只需简单的命令行即可完成项目的初始化工作，达到项目模板快速复用的目的，团队整体研发效率得到有效提升，同时技术栈更统一，也更易于维护。</li></ul><h2 id="一、需求" tabindex="-1">一、需求 <a class="header-anchor" href="#一、需求" aria-label="Permalink to &quot;一、需求&quot;">​</a></h2><ul><li>使用脚手架进行标准的项目初始化 <ul><li><strong>jay init test-project</strong></li></ul></li><li>需要支持的项目模板： <ul><li><s><strong>C端项目模板：project-template-vue</strong></s></li><li><strong>中后台管理系统项目模板：project-template-hey-admin</strong></li><li><strong>H5项目模板：project-template-h5</strong></li><li><s><strong>小程序项目模板：project-template-miniapp-remax</strong></s></li><li><s>Node服务端项目模板：project-template-express / project-template-koa2</s></li></ul></li></ul><h2 id="二、设计" tabindex="-1">二、设计 <a class="header-anchor" href="#二、设计" aria-label="Permalink to &quot;二、设计&quot;">​</a></h2><h3 id="架构设计图" tabindex="-1">架构设计图 <a class="header-anchor" href="#架构设计图" aria-label="Permalink to &quot;架构设计图&quot;">​</a></h3><p><img src="https://oss-1252175178.cos.ap-shanghai.myqcloud.com/%E6%85%95%E8%AF%BE%E7%BD%91%E6%9E%B6%E6%9E%84%E5%B8%88%E8%AF%BE%E7%A8%8B/%E8%84%9A%E6%89%8B%E6%9E%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%9B%BE-%E8%87%AA%E5%88%B6.jpg" alt=""></p><p>主要实现：</p><ul><li>多包拆分，使用Lerna进行管理</li><li>1、<code>core</code> 脚手架核心模块（<strong>执行准备、命令注册、命令执行</strong>）</li><li>2、<code>init</code> 项目初始化模块（<strong>项目模板下载</strong>、<em>动态渲染</em>、<em>项目模板数据管理</em>）</li></ul><h2 id="三、实现流程" tabindex="-1">三、实现流程 <a class="header-anchor" href="#三、实现流程" aria-label="Permalink to &quot;三、实现流程&quot;">​</a></h2><ul><li><p>实现拆包：</p><ul><li><p>core （cli、exec）</p></li><li><p>commands（init）</p></li><li><p>models（command）</p></li><li><p>utils（log、request）</p></li></ul></li><li><p>脚手架核心开发</p><ul><li>执行准备（检查Root、检查脚手架版本、提示脚手架新版本更新）</li><li>命令注册（设置帮助提示信息、注册init命令）</li><li>命令执行（生成缓存路径、<strong>node多进程</strong>执行本地代码入口文件）</li></ul></li><li><p>init初始化开发</p><ul><li>准备阶段（获取模板列表、用户选择项目模板）</li><li>模板下载（download-git-repo下载项目模板）</li><li>模板安装（复制文件、安装依赖）</li></ul></li></ul><h2 id="四、难点" tabindex="-1">四、难点 <a class="header-anchor" href="#四、难点" aria-label="Permalink to &quot;四、难点&quot;">​</a></h2><p>脚手架核心模块</p><ul><li>lerna使用和原理</li><li>command使用和原理</li><li>动态命令调用</li><li>Node多进程命令执行</li><li>本地缓存</li></ul><p>项目初始化模块</p><ul><li>inquiry使用和原理</li><li>项目模板初始化</li><li><strong>项目模板下载</strong>（npm vs git）（<strong>download-git-repo</strong>）</li><li>动态渲染 ejs/glob</li></ul><h2 id="五、话术" tabindex="-1">五、话术 <a class="header-anchor" href="#五、话术" aria-label="Permalink to &quot;五、话术&quot;">​</a></h2><p>【Situation 背景】</p><p>猎萝⼘平台是公司核⼼项⽬，致力于提升招聘过程中的效率和体验。平台包含toC端和crm等多个中后台系统，多个系统间有许多可复用的部分，如eslint配置、网络请求、埋点等，而新系统的开发往往采用代码拷贝后删减的方式，开发效率较低；</p><p>【Target 目标】</p><p>为了提高团队整体研发效率</p><p>【Action 行动】</p><p>本人作为前端负责人，搭建了公司内部的脚手架jay-cli，具有<strong>可扩展</strong>、<strong>高性能</strong>等特点。架构上使用lerna进行多包管理，commander 库来实现脚手架，并使用node多进程和本地缓存等技术提高执行效率；</p><p>【Result 结果】</p><p>通过脚手架与项目模板相结合，只需简单的命令行即可完成项目的初始化工作，达到项目模板快速复用的目的，团队整体研发效率得到有效提升，同时技术栈更统一，也更易于维护。</p><ul><li><p>jay-cli脚手架属于工程化的一部分，它可以在项目初始化阶段帮助我们快速的复用已有的项目模板。</p></li><li><p>设计之初考虑到未来的可扩展性，参考 vue-cli 对功能模块进行了拆分，并采用了lerna进行管理，主要分为3个部分：</p><ul><li><code>core</code>，脚手架核心模块，主要负责脚手架初始化、命令注册、命令执行（ <code>npminstall</code> 、<code>require(&#39;@jay-cli/init&#39;)</code> 、child_process.spawn）等</li><li><code>commands</code> 命令，比如 init</li><li><code>utils</code> 工具方法，比如 <code>npmlog</code> 打印、获取npm包信息等</li></ul></li><li><p>性能这部分呢也有做一些优化，比如：</p><ul><li>命令执行时使用node多进程 child_process.spawn，提升执行效率</li><li>命令包下载后保存，在本地缓存中，无需每次都下载</li></ul></li></ul><h2 id="六、q-a" tabindex="-1">六、Q&amp;A <a class="header-anchor" href="#六、q-a" aria-label="Permalink to &quot;六、Q&amp;A&quot;">​</a></h2><h3 id="脚手架的原理" tabindex="-1">脚手架的原理 <a class="header-anchor" href="#脚手架的原理" aria-label="Permalink to &quot;脚手架的原理&quot;">​</a></h3><h3 id="lerna的使用和原理" tabindex="-1">Lerna的使用和原理 <a class="header-anchor" href="#lerna的使用和原理" aria-label="Permalink to &quot;Lerna的使用和原理&quot;">​</a></h3><ul><li>多包框架要解决的问题</li></ul><h3 id="遇到的问题和收获" tabindex="-1">遇到的问题和收获 <a class="header-anchor" href="#遇到的问题和收获" aria-label="Permalink to &quot;遇到的问题和收获&quot;">​</a></h3><ul><li>本地调试方法： <code>npm link</code> =&gt; <code> file:../../</code></li><li>如何支持 <code>--debug</code> 打印信息 ： 命令行 =&gt; 环境变量 =&gt; <code>npmlog</code> 设置 level</li><li>许多有用的小工具库 <ul><li><strong>npmlog</strong></li><li>fs-extra</li><li><strong>semver</strong></li><li>colors</li><li>user-home</li><li>dotenv</li><li><strong>root-check</strong></li></ul></li></ul><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p>项目地址：<a href="https://gitee.com/AaronKong/jay-cli" target="_blank" rel="noreferrer">https://gitee.com/AaronKong/jay-cli</a></p>',35)]))}const m=i(t,[["render",r]]);export{u as __pageData,m as default};
