import{_ as l,c as e,o as i,ae as t}from"./chunks/framework.Dh1jimFm.js";const p=JSON.parse('{"title":"链表概览","description":"","frontmatter":{},"headers":[],"relativePath":"article/数据结构与算法/数据结构/链表/链表概览.md","filePath":"article/数据结构与算法/数据结构/链表/链表概览.md","lastUpdated":1743859882000}'),r={name:"article/数据结构与算法/数据结构/链表/链表概览.md"};function o(h,a,c,d,n,u){return i(),e("div",null,a[0]||(a[0]=[t('<h1 id="链表概览" tabindex="-1">链表概览 <a class="header-anchor" href="#链表概览" aria-label="Permalink to &quot;链表概览&quot;">​</a></h1><h2 id="链表是什么" tabindex="-1">链表是什么？ <a class="header-anchor" href="#链表是什么" aria-label="Permalink to &quot;链表是什么？&quot;">​</a></h2><ul><li>多个元素组成的列表</li><li>元素存储不连续，用next指针连在一起</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li>链表里的元素存储不是连续的，之前通过 next 连接</li><li>JavaScript 中没有链表，但可以用 Object 模拟链表</li><li>链表常用操作：<strong>修改next、遍历链表</strong></li><li>JS中的原型链也是一个链表（沿着proto指针）</li><li>使用链表指针可以获取嵌套JSON的节点值</li></ul><h2 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h2><p>用一组任意存储的单元来存储线性表的数据元素。一个对象存储着本身的值和下一个元素的地址。</p><ul><li>需要遍历才能查询到元素，查询慢。</li><li>插入元素只需断开连接重新赋值，插入快。</li></ul><p><img src="https://i.loli.net/2019/08/18/K7ysIF3qXzTJxUN.jpg" alt=""></p><p>链表在开发中也是经常用到的数据结构，<code>React16</code> 的 <code>Fiber Node</code> 连接起来形成的<code>Fiber Tree</code>, 就是个单链表结构。</p><h2 id="基本应用" tabindex="-1">基本应用 <a class="header-anchor" href="#基本应用" aria-label="Permalink to &quot;基本应用&quot;">​</a></h2><blockquote><p>主要是对链表基本概念和特性的应用，如果基础概念掌握牢靠，此类问题即可迎刃而解</p></blockquote><ul><li><a href="./从尾到头打印链表.html">从尾到头打印链表</a></li><li><a href="./删除链表中的节点.html">删除链表中的节点</a></li><li><a href="./反转链表.html">反转链表</a></li><li><a href="./复杂链表的复制.html">复杂链表的复制</a></li></ul><h2 id="环类题目" tabindex="-1">环类题目 <a class="header-anchor" href="#环类题目" aria-label="Permalink to &quot;环类题目&quot;">​</a></h2><blockquote><p>环类题目即从判断一个单链表是否存在循环而扩展衍生的问题</p></blockquote><ul><li><a href="./141-环形链表.html">141-环形链表</a></li><li><a href="./链表环的入口节点.html">链表环的入口节点</a></li></ul><h2 id="双指针" tabindex="-1">双指针 <a class="header-anchor" href="#双指针" aria-label="Permalink to &quot;双指针&quot;">​</a></h2><blockquote><p>双指针的思想在链表和数组中的题目都经常会用到，主要是利用两个或多个不同位置的指针，通过速度和方向的变换解决问题。</p></blockquote><ul><li>两个指针从不同位置出发：一个从始端开始，另一个从末端开始；</li><li>两个指针以不同速度移动：一个指针快一些，另一个指针慢一些。</li></ul><p>对于单链表，因为我们只能在一个方向上遍历链表，所以第一种情景可能无法工作。然而，第二种情景，也被称为慢指针和快指针技巧，是非常有用的。</p><ul><li><a href="./两个链表的公共节点.html">两个链表的公共节点</a></li><li><a href="./链表倒数第k个节点.html">链表倒数第k个节点</a></li><li><a href="./相交链表.html">相交链表</a></li></ul><h2 id="双向链表" tabindex="-1">双向链表 <a class="header-anchor" href="#双向链表" aria-label="Permalink to &quot;双向链表&quot;">​</a></h2><p>双链还有一个引用字段，称为<code>prev</code>字段。有了这个额外的字段，您就能够知道当前结点的前一个结点。</p><ul><li><a href="./扁平化多级双向链表.html">扁平化多级双向链表</a></li></ul>',24)]))}const m=l(r,[["render",o]]);export{p as __pageData,m as default};
