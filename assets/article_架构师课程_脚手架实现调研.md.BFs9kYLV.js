import{_ as l,c as i,o as a,ae as c}from"./chunks/framework.Dh1jimFm.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"article/架构师课程/脚手架实现调研.md","filePath":"article/架构师课程/脚手架实现调研.md","lastUpdated":1743859882000}'),o={name:"article/架构师课程/脚手架实现调研.md"};function r(t,e,p,d,u,n){return a(),i("div",null,e[0]||(e[0]=[c('<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>本文将调研下面几种脚手架的功能以及架构：</p><ul><li><code>imooc-cli</code></li><li><code>vue-cli（1.x/2.x） =&gt; create-vue(3.x)</code></li><li><code>create-react-app</code></li><li><code>hey-cli</code> =&gt; <code>jay-cli</code></li></ul><p>最后梳理出自研脚手架 <code>jay-cli</code> 所需的功能和架构</p><h2 id="imooc-cli-重点" tabindex="-1">imooc-cli（重点） <a class="header-anchor" href="#imooc-cli-重点" aria-label="Permalink to &quot;imooc-cli（重点）&quot;">​</a></h2><blockquote><p>imooc-cli 是慕课网架构师课程中的脚手架</p></blockquote><p>解决痛点：</p><ul><li>项目代码复用</li></ul><p>功能：</p><ul><li>标准的项目初始化流程 <ul><li>准备阶段：命令行交互 <code>commander</code> <code>inquirer</code></li><li>执行阶段：多进程 <code>child_process</code></li><li>下载阶段：本地缓存 <code>fse</code> 、模板编译 <code>ejs</code></li></ul></li></ul><p>架构：</p><p><img src="https://oss-1252175178.cos.ap-shanghai.myqcloud.com/%E6%85%95%E8%AF%BE%E7%BD%91%E6%9E%B6%E6%9E%84%E5%B8%88%E8%AF%BE%E7%A8%8B/%E8%84%9A%E6%89%8B%E6%9E%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%9B%BE.jpeg" alt=""></p><p>优点：</p><ul><li>高可维护： <ul><li>分包+利用lerna进行多包管理，便于维护</li></ul></li><li>高性能： <ul><li>分包+将代码拆分到不同模块中，提高安装效率</li><li>利用node多进程执行代码</li></ul></li></ul><p>缺点：</p><ul><li>模板为纯内部管理，不支持从外部git地址拷贝代码</li></ul><p>最佳实践：</p><ul><li>lerna多包管理</li><li>command/yargs实现脚手架</li></ul><h2 id="vue-cli-create-vue-重点" tabindex="-1">vue-cli/create-vue（重点） <a class="header-anchor" href="#vue-cli-create-vue-重点" aria-label="Permalink to &quot;vue-cli/create-vue（重点）&quot;">​</a></h2><blockquote><p>Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统。</p><p>Vue CLI 致力于将 Vue 生态中的工具基础标准化。它确保了各种构建工具能够基于智能的默认配置即可平稳衔接，这样你可以专注在撰写应用上，而不必花好几天去纠结配置的问题。与此同时，它也为每个工具提供了调整配置的灵活性，无需 eject。</p></blockquote><p>功能：</p><ul><li>交互式项目脚手架（<code>@vue/cli</code>）</li><li>零配置原型开发（<code>@vue/cli</code> + <code>@vue/cli-service-global</code>）</li><li>运行时依赖（<code>@vue/cli-service</code>）</li><li>官方插件集合</li><li>图形化界面创建和管理 vue.js 项目</li></ul><p>架构：</p><ul><li>多包管理：vue-cli 使用 lerna，create-vue 使用 workspace</li></ul><p>优点：</p><p>缺点：</p><h2 id="create-react-app" tabindex="-1">create-react-app <a class="header-anchor" href="#create-react-app" aria-label="Permalink to &quot;create-react-app&quot;">​</a></h2><h2 id="cm-cli" tabindex="-1">cm-cli <a class="header-anchor" href="#cm-cli" aria-label="Permalink to &quot;cm-cli&quot;">​</a></h2><p>功能：</p><ul><li>根据项目模板进行项目初始化</li><li>动态添加和删除模板</li></ul><h2 id="hey-cli-重点" tabindex="-1">hey-cli（重点） <a class="header-anchor" href="#hey-cli-重点" aria-label="Permalink to &quot;hey-cli（重点）&quot;">​</a></h2><blockquote><p>webpack脚手架，hot-dev-server，build。</p><p>不需要理解webpack，只需要知道如何配置就可以使用，摆脱繁琐重复的webpack配置。</p></blockquote><p>特点：</p><ul><li><strong>提供脚手架</strong>：可以生成vue、react、以及包含HeyUI组件库的项目，统一项目模板</li><li><strong>内置一套默认的webpack配置</strong>：降低webpack配置难度，一次全局安装，所有的开发项目都支持，不需要每个项目都安装配置 <code>webpack</code>，只需要配置 <code>hey.conf.js</code> 配置文件即可使用</li><li><strong>提高创建新项目速度</strong>，webpack原来是十几二十个，封装后，项目中需要安装的依赖只有几个</li></ul><p>功能：</p><ol><li>命令行交互</li><li>模板复制（hey init）</li><li>dev/build运行（内置默认webpack配置）</li></ol><p>配置：</p><ul><li>hey.conf.js，package.json</li><li>webpack可扩展配置</li></ul><p>看了代码后，豁然开朗，下面是整理的一些功能的实现原理。</p><h4 id="_1、命令行交互" tabindex="-1">1、命令行交互 <a class="header-anchor" href="#_1、命令行交互" aria-label="Permalink to &quot;1、命令行交互&quot;">​</a></h4><ol><li>使用 commander、inquirer 等库控制流程</li><li>使用 chalk ora 等库控制输出样式</li><li>获取用户输入后，调用响应的task进行处理</li></ol><h4 id="_2、模板复制" tabindex="-1">2、模板复制 <a class="header-anchor" href="#_2、模板复制" aria-label="Permalink to &quot;2、模板复制&quot;">​</a></h4><ol><li>使用 rimraf 删除现有目录</li><li>使用 download-git-repo git远程仓库拉取</li><li>使用 metalsmith 处理模板</li></ol><h4 id="_3、dev-build运行-内置默认webpack配置" tabindex="-1">3、dev/build运行（内置默认webpack配置） <a class="header-anchor" href="#_3、dev-build运行-内置默认webpack配置" aria-label="Permalink to &quot;3、dev/build运行（内置默认webpack配置）&quot;">​</a></h4><ol><li>getConfig 查找配置文件 hey.js hey.conf.js package.json</li><li>generatorWebpackConfig 合并默认webpack配置和用户配置，返回 webpackConfig</li><li>var compiler = webpack(webpackConfig)</li><li>new WebpackDevServer(compiler, serverCfg)</li><li>监听webpack结束hook：compiler.hooks.done.tap(&#39;complete&#39;, (stats) =&gt; {})</li><li>任务结束，输出相关log</li><li>如果是 build 还需要将生成的文件 copy 一下</li></ol><p>缺点：</p><ul><li><strong>项目升级困难</strong>（需先升级脚手架）</li><li>可扩展性较弱</li></ul><h2 id="jay-cli-create-jay-重点" tabindex="-1">jay-cli/create-jay（重点） <a class="header-anchor" href="#jay-cli-create-jay-重点" aria-label="Permalink to &quot;jay-cli/create-jay（重点）&quot;">​</a></h2><blockquote><p>高性能自研脚手架，供公司内部使用</p></blockquote><p>功能：</p><ul><li>支持添加模板、动态模板渲染</li></ul>',51)]))}const b=l(o,[["render",r]]);export{h as __pageData,b as default};
