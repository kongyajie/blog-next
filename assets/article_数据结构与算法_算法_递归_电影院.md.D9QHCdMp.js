import{_ as i,c as a,o as t,ae as n}from"./chunks/framework.Dh1jimFm.js";const c=JSON.parse('{"title":"电影院","description":"","frontmatter":{},"headers":[],"relativePath":"article/数据结构与算法/算法/递归/电影院.md","filePath":"article/数据结构与算法/算法/递归/电影院.md","lastUpdated":1743859882000}'),e={name:"article/数据结构与算法/算法/递归/电影院.md"};function h(p,s,l,k,r,d){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="电影院" tabindex="-1">电影院 <a class="header-anchor" href="#电影院" aria-label="Permalink to &quot;电影院&quot;">​</a></h1><blockquote><p>周末你带着女朋友去电影院，女朋友问你，咱们现在坐在第几排啊，电影院太黑没法数怎么办，于是你问前一排的人他是第几排，你只需要在他的数字上加一就知道自己是第几排，但是前面的人也看不清啊。所以他也问前面的人，就这样一排一排的问直到问到第一排的人</p></blockquote><p>这是一个非常标准的递归求解问题的分解过程，去的过程叫递，回来的过程叫归。基本上，所有的递归问题都可以用递推公式来表示。刚刚这个生活中的例子，我们用递推公式将它表示出来是这样的：</p><p><code>f(n) = f(n-1) +1 其中，f(1) = 1</code></p><p>f(n)代表你想知道自己在哪一排，f(n-1)表示前面一排所在的排树。核心代码如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cinemas</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cinemas</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,6)]))}const o=i(e,[["render",h]]);export{c as __pageData,o as default};
