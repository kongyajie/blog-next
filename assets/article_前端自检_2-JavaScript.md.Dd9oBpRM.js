import{_ as s,c as a,o as l,ae as n}from"./chunks/framework.Dh1jimFm.js";const d=JSON.parse('{"title":"JavaScript","description":"","frontmatter":{},"headers":[],"relativePath":"article/前端自检/2-JavaScript.md","filePath":"article/前端自检/2-JavaScript.md","lastUpdated":1743862747000}'),h={name:"article/前端自检/2-JavaScript.md"};function t(e,i,k,p,r,E){return l(),a("div",null,i[0]||(i[0]=[n(`<h1 id="javascript" tabindex="-1">JavaScript <a class="header-anchor" href="#javascript" aria-label="Permalink to &quot;JavaScript&quot;">​</a></h1><h2 id="一、js概览" tabindex="-1">一、JS概览 <a class="header-anchor" href="#一、js概览" aria-label="Permalink to &quot;一、JS概览&quot;">​</a></h2><h3 id="js的由来" tabindex="-1">JS的由来 <a class="header-anchor" href="#js的由来" aria-label="Permalink to &quot;JS的由来&quot;">​</a></h3><ul><li><code>JavaScript</code> 的诞生是为了解决网页的动态化，被设计成一门脚本语言</li></ul><h3 id="js的特性" tabindex="-1">JS的特性 <a class="header-anchor" href="#js的特性" aria-label="Permalink to &quot;JS的特性&quot;">​</a></h3><ul><li>作为一门脚本语言，<code>JavaScript</code> 拥有 <strong>单线程</strong>、<strong>动态</strong>、<strong>弱类型</strong>、<strong>解释性语言</strong> 等特性，同时它借鉴了 <code>self</code> 语言的 <strong>原型编程</strong> 、<code>scheme</code> 的 <strong>函数式编程</strong> ，以及c语言的语法结构。又因为当时 <code>Java</code> 的时髦，所以最终命名为<code>JavaScript</code> 。</li></ul><h3 id="js是什么" tabindex="-1">JS是什么 <a class="header-anchor" href="#js是什么" aria-label="Permalink to &quot;JS是什么&quot;">​</a></h3><ul><li><p><code>ECMAScript</code> 标准描述了 <code>JavaScript</code> 的语法和基本对象等。</p></li><li><p><code>JavaScript</code> 需要运行在宿主环境如浏览器、Node.js中，宿主环境中的JS引擎负责解释执行JS脚本。</p></li></ul><h2 id="二、js类型" tabindex="-1">二、JS类型 <a class="header-anchor" href="#二、js类型" aria-label="Permalink to &quot;二、JS类型&quot;">​</a></h2><h3 id="类型分类" tabindex="-1">类型分类 <a class="header-anchor" href="#类型分类" aria-label="Permalink to &quot;类型分类&quot;">​</a></h3><ul><li>原始数据类型：<code>undefined</code> <code>null</code> <code>number</code> <code>string</code> <code>boolean</code> <code>symbol</code> <code>bigInt</code>）</li><li>引用类：<code>object</code></li></ul><h3 id="类型存储" tabindex="-1">类型存储 <a class="header-anchor" href="#类型存储" aria-label="Permalink to &quot;类型存储&quot;">​</a></h3><ul><li>原始数据类型存放在栈空间，引用类型存放在堆空间。</li><li>本质上，<code>ECMAScript</code> 中都是值传递的。</li></ul><h3 id="类型判定-重要" tabindex="-1">类型判定（重要） <a class="header-anchor" href="#类型判定-重要" aria-label="Permalink to &quot;类型判定（重要）&quot;">​</a></h3><ul><li><code>typeof</code> 判断<strong>基本类型</strong>和<strong>函数对象</strong>很方便，但无法区分 <code>null</code> 和 <code>object</code>（包括数组）。</li><li><code>instanceof</code> 运算符用于检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上，只能检测对象的类型。</li><li><code>Object.prototype.toString</code> 默认返回当前对象的 <code>[[Class]]</code></li><li><code>constructor</code> 通过对象的该属性可判断其类型（有被修改的风险）</li></ul><h3 id="类型的转换" tabindex="-1">类型的转换 <a class="header-anchor" href="#类型的转换" aria-label="Permalink to &quot;类型的转换&quot;">​</a></h3><p>常见的隐式类型转换的场景、以及使用内置对象进行的装箱拆箱的过程</p><h3 id="类型细节" tabindex="-1">类型细节 <a class="header-anchor" href="#类型细节" aria-label="Permalink to &quot;类型细节&quot;">​</a></h3><ul><li>为什么 <code>0.1 + 0.2 !== 0.3</code></li><li>为什么推荐用 <code>void 0</code> 代替 <code>undefined</code></li></ul><h2 id="三、原型和原型链" tabindex="-1">三、原型和原型链 <a class="header-anchor" href="#三、原型和原型链" aria-label="Permalink to &quot;三、原型和原型链&quot;">​</a></h2><h3 id="实现类" tabindex="-1">实现类 <a class="header-anchor" href="#实现类" aria-label="Permalink to &quot;实现类&quot;">​</a></h3><ul><li>练习：ES5/ES6手写Person类</li></ul><h3 id="原型链-重要" tabindex="-1">原型链（重要） <a class="header-anchor" href="#原型链-重要" aria-label="Permalink to &quot;原型链（重要）&quot;">​</a></h3><ul><li><code>prototype</code> 是构造函数上的属性，用来在不同的实例间共享属性和方法</li><li><code>__proto__</code> 是对象上的属性，指向这个对象的原型</li><li><code>constructor</code> 是对象的构造函数，指向创建这个对象的构造函数</li><li><code>instanceof</code> 是判断一个对象是否为这个构造函数的实例</li></ul><p><img src="https://img3.mukewang.com/szimg/605754fc0001ec9a19201080.jpg" alt="原型链"></p><p>原型链示例：</p><ul><li>obj =&gt; Object.prototype =&gt; null</li><li>func =&gt; Function.prototype =&gt; Object.prototype =&gt; null</li><li>arr =&gt; Array.prototype =&gt; Object.prototype =&gt; null</li></ul><p><strong>instanceof</strong></p><ul><li><p><strong>如果A沿着原型链能找到 B.prototype，那么 A instanceof B 为 true</strong></p></li><li><p>func instanceof Function === true</p></li><li><p>func instanceof Object === true</p></li><li><p>实现：</p></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> instanceOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">instance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> instance;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ctor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__proto__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="实现继承" tabindex="-1">实现继承 <a class="header-anchor" href="#实现继承" aria-label="Permalink to &quot;实现继承&quot;">​</a></h3><ul><li>练习：ES5/ES6手写Student类</li></ul><h3 id="object对象上的属性和方法" tabindex="-1">Object对象上的属性和方法 <a class="header-anchor" href="#object对象上的属性和方法" aria-label="Permalink to &quot;Object对象上的属性和方法&quot;">​</a></h3><ul><li>创建相关 <ul><li><strong><code>Object.create(proto，[propertiesObject])</code></strong> 方法创建一个新对象，使用现有的对象来提供新创建的对象的__proto__</li><li><strong><code>Object.assign(target, ...sources)</code></strong> 方法用于将所有可枚举属性的值从一个或多个源对象分配到目标对象。它将返回目标对象。</li></ul></li><li>属性相关 <ul><li><strong><code>Object.defineProperties(obj, props)</code></strong> 方法直接在一个对象上定义新的属性或修改现有属性，并返回该对象。</li><li><strong><code>Object.keys(obj)</code></strong> 方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和正常循环遍历该对象时返回的顺序一致 。</li><li><strong><code>obj.hasOwnProperty(prop)</code></strong> 方法会返回一个布尔值，指示对象自身属性中是否具有指定的属性（也就是，是否有指定的键）。</li></ul></li><li>原型相关 <ul><li><code>Object.setPrototypeOf()</code> 方法设置一个指定的对象的原型 ( 即, 内部[[Prototype]]属性）到另一个对象或 null。<strong>性能原因建议使用 Object.create 替代</strong></li><li><code>Object.getPrototypeOf(obj)</code> 方法返回指定对象的原型（内部[[Prototype]]属性的值）。</li><li><code>prototypeObj.isPrototypeOf(object)</code> 方法用于测试一个对象是否存在于另一个对象的原型链上。</li></ul></li><li>其他 <ul><li><code>Object.is(value1, value2)</code> 方法判断两个值是否为同一个值。</li><li><strong><code>obj.toString()</code></strong> 方法返回一个表示该对象的字符串。</li><li><strong><code>obj.valueOf()</code></strong> 方法返回指定对象的原始值。</li></ul></li></ul><h3 id="练习" tabindex="-1"><strong>练习</strong> <a class="header-anchor" href="#练习" aria-label="Permalink to &quot;**练习**&quot;">​</a></h3><ul><li><p>练习1：分别用ES5/ES6实现类、ES5/ES6实现继承、并用代码模拟原型链的查找过程</p></li><li><p>练习2：手写new、手写instanceof</p></li></ul><h2 id="四、执行机制" tabindex="-1">四、执行机制 <a class="header-anchor" href="#四、执行机制" aria-label="Permalink to &quot;四、执行机制&quot;">​</a></h2><h3 id="js执行过程-重要" tabindex="-1"><strong>JS执行过程（重要）</strong> <a class="header-anchor" href="#js执行过程-重要" aria-label="Permalink to &quot;**JS执行过程（重要）**&quot;">​</a></h3><p>（单线程）EventLoop -&gt; （宏任务）执行script -&gt;（编译原理） 先编译后执行-&gt; 可执行代码（字节码）+ 执行上下文</p><h3 id="变量提升-重要" tabindex="-1"><strong>变量提升（重要）</strong> <a class="header-anchor" href="#变量提升-重要" aria-label="Permalink to &quot;**变量提升（重要）**&quot;">​</a></h3><ul><li>变量提升现象</li><li>执行过程：编译+执行</li><li>编译时，会创建执行上下文（全局、函数、eval）和可执行代码</li><li>执行上下文中包含变量环境，辅助变量提升</li><li>变量提升是设计缺陷，为了简单，只设计了全局和函数作用域，没有设计块级作用域，因此带来的变量提升会造成变量覆盖、变量污染等问题</li><li>因此，ES6加入了let和const来解决这个问题，本质是加入了块级作用域</li></ul><h3 id="块级作用域-重要" tabindex="-1"><strong>块级作用域（重要）</strong> <a class="header-anchor" href="#块级作用域-重要" aria-label="Permalink to &quot;**块级作用域（重要）**&quot;">​</a></h3><ul><li>块级作用域的原理是：在执行上下文中的<strong>词法环境</strong>来管理的，词法环境也是一个栈结构，这样块级作用域内部的变量就不会被提升，进而影响到外部环境了</li><li>有了块级作用域后，变量的查找路径变为：当前执行上下文的词法环境 =&gt; 当前执行上下文的变量环境 =&gt; outer指向的执行上下文的词法环境、变量环境</li><li>outer和作用域链有关，而js的作用域链是按照词法作用域的规则来的，也就是在代码声明的时候，outer就确定好了的</li><li>由于词法作用域要求，内部函数需要能访问到外部函数的变量，因此外部函数的变量不能随便被GC，于是有了闭包</li></ul><h3 id="闭包-重要" tabindex="-1"><strong>闭包（重要）</strong> <a class="header-anchor" href="#闭包-重要" aria-label="Permalink to &quot;**闭包（重要）**&quot;">​</a></h3><ul><li>闭包可以理解为内部函数引用外部函数变量的集合</li><li>闭包的产生是在外部函数返回内部函数时，外部函数执行完毕，外部函数的执行上下文出栈，这时JS引擎会判断返回的这个内部函数是否有引用外部函数内的变量，如果有，则形成闭包，并加入到调用栈中</li><li>闭包使用时，内部函数被调用，这时会首先在内部函数的执行上下文中查找，如果没有，则向闭包中查找变量</li><li>闭包的释放，当引用内部函数的变量是全局变量时，和页面同生命周期；当是局部变量时，定义这个局部变量的函数若被销毁，则这个局部变量引用的闭包也会销毁。</li><li>闭包的作用是保存私有变量和维护它的状态</li></ul><h3 id="this-重要" tabindex="-1"><strong>this（重要）</strong> <a class="header-anchor" href="#this-重要" aria-label="Permalink to &quot;**this（重要）**&quot;">​</a></h3><ul><li>this存在于执行上下文中，是被设计用来在对象内部使用对象内部的属性的</li><li>全局执行上下文中，this指向window</li><li>函数执行上下文中，this默认指向这个函数，但我们也可以修改它的指向</li><li>修改方法：apply/call/bind、new、在对象中调用</li><li>this的设计有缺陷，比如嵌套函数的this不会从外层嵌套中继承</li><li>解决办法是：使用箭头函数、或者定义self（使用作用域链机制代替this）</li><li>比如普通函数中的this默认指向全局对象window，解决办法是：使用严格模式</li></ul><h3 id="箭头函数-重要" tabindex="-1"><strong>箭头函数（重要）</strong> <a class="header-anchor" href="#箭头函数-重要" aria-label="Permalink to &quot;**箭头函数（重要）**&quot;">​</a></h3><ul><li>箭头函数的引入是为了解决this不能继承的缺陷的，同时简化写法</li><li>箭头函数的特点是它不绑定this、不能当做构造函数new对象，没有prototype属性（构造函数才有）</li></ul><h3 id="严格模式" tabindex="-1"><strong>严格模式</strong> <a class="header-anchor" href="#严格模式" aria-label="Permalink to &quot;**严格模式**&quot;">​</a></h3><ul><li>消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;</li><li>消除代码运行的一些不安全之处，保证代码运行的安全；</li><li>提高编译器效率，增加运行速度；</li><li>为未来新版本的Javascript做好铺垫。</li></ul><h3 id="垃圾回收" tabindex="-1"><strong>垃圾回收</strong> <a class="header-anchor" href="#垃圾回收" aria-label="Permalink to &quot;**垃圾回收**&quot;">​</a></h3><ul><li>什么是垃圾 <ul><li>没有被引用的对象就是垃圾</li></ul></li><li>如何捡垃圾 <ul><li><strong>标记-清除算法</strong>（Mark-Sweep GC） <ul><li>1、标记阶段:从根集合出发，将所有活动对象及其子对象打上标记</li><li>2、清除阶段：遍历堆，将非活动对象（未打上标记）的连接到空闲链表上</li><li>优点：实现简单， 容易和其他算法组合</li><li>缺点：碎片化， 会导致无数小分块散落在堆的各处</li></ul></li><li>引用计数（Reference Counting） <ul><li>引用计数，就是记录每个对象被引用的次数，每次新建对象、赋值引用和删除引用的同时更新计数器，如果计数器值为0则直接回收内存。</li><li>优点：可即刻回收垃圾</li><li>缺点：计数器的增减处理繁重、占用很多位</li></ul></li><li><a href="https://segmentfault.com/a/1190000018605776" target="_blank" rel="noreferrer">参考</a></li></ul></li></ul><h3 id="内存泄漏" tabindex="-1"><strong>内存泄漏</strong> <a class="header-anchor" href="#内存泄漏" aria-label="Permalink to &quot;**内存泄漏**&quot;">​</a></h3><ol><li><p>闭包引起的内存泄漏</p></li><li><p>没有清理的DOM元素引用</p></li><li><p>没有清理的定时器/事件监听</p></li></ol><h3 id="练习-1" tabindex="-1"><strong>练习</strong> <a class="header-anchor" href="#练习-1" aria-label="Permalink to &quot;**练习**&quot;">​</a></h3><ul><li>分析原型链</li><li>分析代码的执行过程</li><li>分析闭包执行原理</li></ul><h2 id="五、js异步" tabindex="-1">五、JS异步 <a class="header-anchor" href="#五、js异步" aria-label="Permalink to &quot;五、JS异步&quot;">​</a></h2><h3 id="异步基础" tabindex="-1">异步基础 <a class="header-anchor" href="#异步基础" aria-label="Permalink to &quot;异步基础&quot;">​</a></h3><ul><li><p>为什么需要异步：JS设计为单线程，同步会阻塞代码的执行，异步不会阻塞代码的执行</p></li><li><p>异步的使用场景：<code>Ajax</code> 、\`setTimeout1</p></li><li><p>异步编程的演化</p><ul><li>callback</li><li>promise</li><li>generator</li><li>async/await</li></ul></li></ul><h3 id="eventloop-重要" tabindex="-1">EventLoop（重要） <a class="header-anchor" href="#eventloop-重要" aria-label="Permalink to &quot;EventLoop（重要）&quot;">​</a></h3><ul><li>是什么？</li><li>解决什么问题？</li><li>执行过程如何？</li></ul><h3 id="宏任务和微任务-重要" tabindex="-1">宏任务和微任务（重要） <a class="header-anchor" href="#宏任务和微任务-重要" aria-label="Permalink to &quot;宏任务和微任务（重要）&quot;">​</a></h3><ul><li><p>什么是宏任务，什么是微任务</p><ul><li>宏任务：SetTimeout、Ajax、I/O、DOM事件</li><li>微任务：Promise、Async/Await</li></ul></li><li><p>为什么要加入微任务？</p><blockquote><p>宏任务的时间粒度比较大，执行的时间间隔是不能精确控制的，对一些高实时性的需求就不太符合了，比如监听 DOM 的变化。</p></blockquote><p>监听 DOM 变化技术方案的演化史</p><ol><li>轮询</li><li>Mutation Event</li><li>Mutation Observer（采用微任务机制，有效地权衡了<strong>实时性</strong>和执行效率的问题）</li></ol></li></ul><h3 id="eventloop-和-dom渲染" tabindex="-1">eventloop 和 DOM渲染 <a class="header-anchor" href="#eventloop-和-dom渲染" aria-label="Permalink to &quot;eventloop 和 DOM渲染&quot;">​</a></h3><ul><li>1、Call Stack空闲</li><li>2、执行当前的微任务</li><li>3、尝试DOM渲染</li><li>3、触发eventLoop机制</li></ul><h3 id="promise-重要" tabindex="-1">Promise（重要） <a class="header-anchor" href="#promise-重要" aria-label="Permalink to &quot;Promise（重要）&quot;">​</a></h3><ul><li>三种状态和变化 <ul><li>pending/resolved/rejected</li><li>pending-&gt;resolved 或 pending-&gt;rejected</li><li>变化不可逆</li></ul></li><li>状态的表现 <ul><li>pending状态不会触发then和catch</li><li>resolved状态，会触发后续的then回调函数</li><li>rejected状态，会触发后续的catch回调函数</li></ul></li><li>then 和 catch 对状态的影响（重要）： <ul><li>只要没报错，then/catch都返回resolved Promise</li><li>有报错，都返回rejected Promise</li></ul></li><li>then 和 catch 的链式调用（常考）</li></ul><h3 id="await-async-和-promise-的关系-重要" tabindex="-1">await/async 和 Promise 的关系（重要） <a class="header-anchor" href="#await-async-和-promise-的关系-重要" aria-label="Permalink to &quot;await/async 和 Promise 的关系（重要）&quot;">​</a></h3><ul><li>执行aynsc函数，返回的是Promise对象</li><li>await相当于promise的then</li><li>try...catch可捕获异常，代替了promise的catch</li></ul><h3 id="什么场合用async-await-什么场合用promise" tabindex="-1">什么场合用async/await，什么场合用Promise？ <a class="header-anchor" href="#什么场合用async-await-什么场合用promise" aria-label="Permalink to &quot;什么场合用async/await，什么场合用Promise？&quot;">​</a></h3><ul><li>需要用到Promise各种便捷的方法（比如.race()之类）的时候，一定用Promise。</li><li>并行的请求最好用Promise。</li><li>不需要并行的场合，如果要传递参数，最好用Promise。</li><li>其他ajax场合，看你喜好try...catch...还是.catch()，以决定使用哪一方。</li></ul><h3 id="异步的本质" tabindex="-1">异步的本质 <a class="header-anchor" href="#异步的本质" aria-label="Permalink to &quot;异步的本质&quot;">​</a></h3><ul><li>async/await 是消灭异步回调的终极武器</li><li>JS还是单线程，还是得有异步，还是得基于 event loop</li><li>async/await 只是一个语法糖，但这颗糖真香！</li></ul><h3 id="练习-2" tabindex="-1">练习 <a class="header-anchor" href="#练习-2" aria-label="Permalink to &quot;练习&quot;">​</a></h3><ul><li>手写Promise</li><li>Promise根据代码判断执行结果</li></ul><h2 id="六、常见js编程题" tabindex="-1">六、常见JS编程题 <a class="header-anchor" href="#六、常见js编程题" aria-label="Permalink to &quot;六、常见JS编程题&quot;">​</a></h2><ul><li><a href="https://blog.aaronkong.top//article/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JS%E7%BC%96%E7%A8%8B/%E5%AE%9E%E7%94%A8-%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81.html" target="_blank" rel="noreferrer">实用-节流&amp;防抖</a></li><li><a href="https://blog.aaronkong.top//article/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JS%E7%BC%96%E7%A8%8B/%E5%AE%9E%E7%94%A8-%E6%89%8B%E5%86%99%E5%93%8D%E5%BA%94%E5%BC%8F.html" target="_blank" rel="noreferrer">实用-手写响应式</a></li><li><a href="https://blog.aaronkong.top//article/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JS%E7%BC%96%E7%A8%8B/%E6%95%B0%E7%BB%84-%E4%B9%B1%E5%BA%8F.html" target="_blank" rel="noreferrer">数组-乱序</a></li><li><a href="https://blog.aaronkong.top//article/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JS%E7%BC%96%E7%A8%8B/%E6%95%B0%E7%BB%84-%E6%89%81%E5%B9%B3%E5%8C%96.html" target="_blank" rel="noreferrer">数组-扁平化</a></li><li><a href="https://blog.aaronkong.top//article/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JS%E7%BC%96%E7%A8%8B/%E5%AF%B9%E8%B1%A1-%E6%89%81%E5%B9%B3%E5%8C%96.html" target="_blank" rel="noreferrer">对象-扁平化&amp;反扁平化</a></li><li><a href="https://blog.aaronkong.top//article/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JS%E7%BC%96%E7%A8%8B/%E5%AF%B9%E8%B1%A1-%E6%B7%B1%E6%8B%B7%E8%B4%9D.html" target="_blank" rel="noreferrer">对象-深拷贝</a></li><li><a href="https://blog.aaronkong.top//article/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JS%E7%BC%96%E7%A8%8B/%E5%87%BD%E6%95%B0-new.html" target="_blank" rel="noreferrer">函数-模拟new 操作</a></li><li><a href="https://blog.aaronkong.top//article/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JS%E7%BC%96%E7%A8%8B/%E5%87%BD%E6%95%B0-%E6%9F%AF%E9%87%8C%E5%8C%96.html" target="_blank" rel="noreferrer">函数-柯里化</a></li><li><code>Promise-Promise.all&amp;Promise.race</code></li></ul><h2 id="七、常见面试题" tabindex="-1">七、常见面试题 <a class="header-anchor" href="#七、常见面试题" aria-label="Permalink to &quot;七、常见面试题&quot;">​</a></h2><h3 id="何为变量提升" tabindex="-1">何为变量提升？ <a class="header-anchor" href="#何为变量提升" aria-label="Permalink to &quot;何为变量提升？&quot;">​</a></h3><ul><li>1.js 会将变量的声明提升到js顶部执行，本质是js引擎在编译的时候，就将所有的变量声明了，因此执行时所有的变量都已经完成了声明。</li><li>2.当有多个同名变量声明的时候，函数声明会覆盖其他的声明。如果有多个函数声明，则是由最后的一个函数声明覆盖之前所有的声明。</li><li>3.let和const都具有变量提升的效果，但是它们都具有临死性死区，从作用域开始，一直到变量的声明语句这整一块，你都不能使用该变量。</li></ul><h3 id="var-和-let-const-的区别" tabindex="-1">var 和 let const 的区别 <a class="header-anchor" href="#var-和-let-const-的区别" aria-label="Permalink to &quot;var 和 let const 的区别&quot;">​</a></h3><ul><li>var声明是全局作用域或函数作用域，而let和const是块作用域。</li><li>var变量可以在其范围内更新和重新声明； let变量可以被更新但不能重新声明； const变量既不能更新也不能重新声明。</li><li>它们都被提升到其作用域的顶端。 但是，虽然使用变量undefined初始化了var变量，但未初始化let和const变量。</li><li>尽管可以在不初始化的情况下声明var和let，但是在声明期间必须初始化const。</li></ul><blockquote><p>暂时性死区：ES6规定，let/const 命令会使区块形成封闭的作用域。若在声明之前使用变量，就会报错。 总之，在代码块内，使用 let 命令声明变量之前，该变量都是不可用的。 这在语法上，称为 “暂时性死区”（ temporal dead zone，简称 TDZ）。</p></blockquote><h3 id="typeof-返回哪些类型" tabindex="-1">typeof 返回哪些类型 <a class="header-anchor" href="#typeof-返回哪些类型" aria-label="Permalink to &quot;typeof 返回哪些类型&quot;">​</a></h3><ul><li>undefined string number boolean symbol</li><li>object（注意，typeof null === &#39;object&#39;）</li><li>function</li></ul><h3 id="列举强制类型转换和隐式类型转换" tabindex="-1">列举强制类型转换和隐式类型转换 <a class="header-anchor" href="#列举强制类型转换和隐式类型转换" aria-label="Permalink to &quot;列举强制类型转换和隐式类型转换&quot;">​</a></h3><ul><li>强制：parseInt parseFloat toString</li><li>隐式：if 、逻辑运算、 == 、+拼接字符串</li></ul><h3 id="手写深度比较-isequal" tabindex="-1">手写深度比较 isEqual <a class="header-anchor" href="#手写深度比较-isequal" aria-label="Permalink to &quot;手写深度比较 isEqual&quot;">​</a></h3><h3 id="数组的api有哪些是纯函数" tabindex="-1">数组的API有哪些是纯函数 <a class="header-anchor" href="#数组的api有哪些是纯函数" aria-label="Permalink to &quot;数组的API有哪些是纯函数&quot;">​</a></h3><ul><li><p>纯函数：</p><ul><li>不改变原数组；</li><li>返回一个数组</li><li>如concat map filter slice</li></ul></li><li><p>非纯函数：</p><ul><li>push pop shift unshift forEach some every reduce</li></ul></li><li><p>reduce <code>arr.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])</code></p></li><li><p>数组方法</p><ul><li>concat() 连接两个或更多的数组，并返回结果。</li><li>copyWithin() 从数组的指定位置拷贝元素到数组的另一个指定位置中。</li><li>entries() 返回数组的可迭代对象。</li><li>every() 检测数值元素的每个元素是否都符合条件。</li><li>fill() 使用一个固定值来填充数组。</li><li>filter() 检测数值元素，并返回符合条件所有元素的数组。</li><li>find() 返回符合传入测试（函数）条件的数组元素。</li><li>findIndex() 返回符合传入测试（函数）条件的数组元素索引。</li><li>forEach() 数组每个元素都执行一次回调函数。</li><li>from() 通过给定的对象中创建一个数组。</li><li>includes() 判断一个数组是否包含一个指定的值。</li><li>indexOf() 搜索数组中的元素，并返回它所在的位置。</li><li>isArray() 判断对象是否为数组。</li><li>join() 把数组的所有元素放入一个字符串。</li><li>keys() 返回数组的可迭代对象，包含原始数组的键(key)。</li><li>lastIndexOf() 搜索数组中的元素，并返回它最后出现的位置。</li><li>map() 通过指定函数处理数组的每个元素，并返回处理后的数组。</li><li>pop() 删除数组的最后一个元素并返回删除的元素。</li><li>push() 向数组的末尾添加一个或更多元素，并返回新的长度。</li><li>reduce() 将数组元素计算为一个值（从左到右）。</li><li>reduceRight() 将数组元素计算为一个值（从右到左）。</li><li>reverse() 反转数组的元素顺序。</li><li>shift() 删除并返回数组的第一个元素。</li><li>slice() 选取数组的一部分，并返回一个新数组。</li><li>some() 检测数组元素中是否有元素符合指定条件。</li><li>sort() 对数组的元素进行排序。</li><li>splice() 从数组中添加或删除元素。</li><li>toString() 把数组转换为字符串，并返回结果。</li><li>unshift() 向数组的开头添加一个或更多元素，并返回新的长度。</li><li>valueOf() 返回数组对象的原始值。</li></ul></li></ul><h3 id="js运行机制检测" tabindex="-1">JS运行机制检测 <a class="header-anchor" href="#js运行机制检测" aria-label="Permalink to &quot;JS运行机制检测&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="js异步面试题" tabindex="-1">JS异步面试题 <a class="header-anchor" href="#js异步面试题" aria-label="Permalink to &quot;JS异步面试题&quot;">​</a></h3><ul><li>promise then 和 catch的连接</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 第一题</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 第二题</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;error1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 第三题</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;error1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><ul><li>async/await语法</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;start&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;c&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, c)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;end&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})();</span></span></code></pre></div><ul><li>Promise 和 setTimeout顺序</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">400</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ul><li>async/await顺序</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> async1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;async1 start&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> async2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;async1 end&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> async2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;async2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;script start&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;setTimeout&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">async1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;promise1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;promise2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;script end&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1.执行同步任务</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2.执行微任务</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3.尝试触发DOM渲染</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4.触发eventLoop，执行宏任务</span></span></code></pre></div>`,102)]))}const g=s(h,[["render",t]]);export{d as __pageData,g as default};
